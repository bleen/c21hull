<?php

/**
 * Implements hook_theme().
 */
function grid_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'grid_field' => array(
      'render element' => 'form',
      'file' => 'theme/grid_theme.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_field_info().
 */
function grid_field_info() {
  return array(
    'grid' => array(
      'label' => t('Grid'),
      'description' => t('Stores a simple grid of text fields'),
      'instance_settings' => array('grid_rows' => '', 'grid_columns' => ''),
      'default_widget' => 'grid_field',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function grid_field_widget_info() {
  return array(
    'grid_field' => array(
      'label' => t('Grid'),
      'description' => t('A simple grid of text fields'),
      'field types' => array('grid'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function grid_field_formatter_info() {
  return array(
    'grid_default' => array(
      'label' => t('Default'),
      'field types' => array('grid'),
    ),
  );
}

/**
 * Implements hook_settings_form().
 */
function grid_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['grid_rows'] = array(
    '#type' => 'textarea',
    '#title' => t('Rows'),
    '#description' => t('Enter a comma separated list of row names.'),
    '#default_value' => isset($settings['grid_rows']) ? $settings['grid_rows'] : '',
    '#required' => TRUE,
  );
  $form['grid_columns'] = array(
    '#type' => 'textarea',
    '#title' => t('Columns'),
    '#description' => t('Enter a comma separated list of column names.'),
    '#default_value' => isset($settings['grid_columns']) ? $settings['grid_columns'] : '',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_widget_form().
 */
function grid_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['#theme'] = 'grid_field';
  $element['#theme_wrappers'] = array('form_element');

  $element['#grid_rows'] = _grid_explode_field_setting($field['settings']['grid_rows']);
  $element['#grid_columns']  = _grid_explode_field_setting($field['settings']['grid_columns']);

  foreach ($element['#grid_rows'] as $row) {
    foreach ($element['#grid_columns'] as $column) {
      $key = drupal_html_class($row) . '_' . drupal_html_class($column);

      // Get the widget default value
      if (!empty($form_state['input'][$field['field_name']][$langcode][$delta]['grid_data'][$key])) {
        $default_value = $form_state['input'][$field['field_name']][$langcode][$delta]['grid_data'][$key];
      }
      else {
        $default_value = isset($items[$delta]['grid_data'][$key]) ? $items[$delta]['grid_data'][$key] : '';
      }

      $element['grid_data'][$key] = array(
        '#type' => 'textfield',
        '#maxlength' => 2048,
        '#size' => 0,
        '#attributes' => array(
          'id' => 'grid_' . $delta . '_' . $key,
          'class' => array('grid-cell', 'grid-row-' . $row, 'grid-col-' . $column),
        ),
        '#default_value' => $default_value,
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function grid_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $output = array();
  $settings = $field['settings'];

  switch ($display['type']) {
    case 'grid_default':
      $grid_rows = _grid_explode_field_setting($settings['grid_rows']);
      $grid_columns = _grid_explode_field_setting($settings['grid_columns']);

      $header = array_merge(array(''), $grid_columns);
      $rows = array();

      $output = _grid_empty_view($grid_rows, $grid_columns);

      foreach ($items as $delta => $item) {
        foreach ($grid_rows as $grid_row) {
          $row = array(
            'data' => array(array('data' => $grid_row, 'header' => TRUE)),
            'no_striping' => TRUE,
          );
          foreach ($grid_columns as $grid_column) {
            $row['data'][] = $item['grid_data'][drupal_html_class($grid_row) . '_' . drupal_html_class($grid_column)];
          }
          $rows[] = $row;
        }

        $output[$delta] = array(
          'title' => array(
            '#markup' => '<h3 class="measurements-grid-header">' . t('Measurements') . '</h3>',
          ),
          'grid' => array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
            '#attributes' => array('class' => array('measurements-grid')),
            '#sticky' => FALSE,
          ),
        );
      }

      break;
  }

  return $output;
}

/**
 * Implements hook_field_presave().
 */
function grid_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as &$item) {
    $item = array('value' => serialize($item));
  }
}

/**
 * Implements hook_field_load().
 */
function grid_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($items as $entity_id => $table) {
    foreach ($table as $delta => $data) {
      if (isset($data['value'])) {
        $items[$entity_id][$delta]['grid_data'] = unserialize($data['value']);
        unset($items[$entity_id][$delta]['value']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function grid_field_is_empty($item, $field) {
  foreach ($item as $data) {
    if (!empty($data)) {
      return FALSE;
    }
  }
  return TRUE;
}

function _grid_explode_field_setting($setting) {
  $exploded_setting = explode(',', $setting);
  array_walk($exploded_setting, create_function('&$val', '$val = trim($val);'));

  return $exploded_setting;
}


/**
 * Create a themed version of an empty grid.
 *
 * @param array $grid_rows
 * @param array $grid_columns
 *
 * @return array
 */
function _grid_empty_view($grid_rows, $grid_columns) {
  $header = array_merge(array(''), $grid_columns);
  $rows = array();

  foreach ($grid_rows as $grid_row) {
    $row = array(
      'data' => array(array('data' => $grid_row, 'header' => TRUE)),
      'no_striping' => TRUE,
    );
    foreach ($grid_columns as $grid_column) {
      $row['data'][] = '';
    }
    $rows[] = $row;
  }

  return array(
    'title' => array(
      '#markup' => '<h3 class="measurements-grid-header">' . t('Measurements') . '</h3>',
    ),
    'grid' => array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array('class' => array('measurements-grid')),
      '#sticky' => FALSE,
    ),
  );


}
