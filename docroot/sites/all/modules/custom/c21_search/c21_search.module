<?php
/**
 * @file
 * Code for the c21 Search feature.
 */

include_once 'c21_search.features.inc';

/**
 * Implements hook_apachesolr_index_document_build().
 */
function c21_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  $term_reference_fields = array();
  switch ($entity_type) {
    case 'node':
      if ($entity->type == 'listing') {
        $term_reference_fields = array(
          'sewage', 'water', 'heat', 'insulation', 'windows', 'basement', 'garage', 'floors', 'walls', 'additional_bldg', 'development', 'township', 'school_district', 'tags'
        );

        $document->addField('ts_field_listing_id', $entity->field_listing_id_prefix[LANGUAGE_NONE][0]['value'] . '-' . $entity->nid);
        $document->addField('ts_field_mls', $entity->field_listing_mls[LANGUAGE_NONE][0]['value']);
        $document->addField('fts_field_listing_list_price', round($entity->field_listing_list_price[LANGUAGE_NONE][0]['value']));
        $document->addField('its_field_listing_bedrooms', $entity->field_listing_bedrooms[LANGUAGE_NONE][0]['value']);
        $document->addField('fts_field_listing_bathrooms', $entity->field_listing_bathrooms[LANGUAGE_NONE][0]['value']);
        $document->addField('fts_field_listing_acreage', $entity->field_listing_acreage[LANGUAGE_NONE][0]['value']);
        $document->addField('fs_field_sq_ft', $entity->field_listing_sq_ft_above[LANGUAGE_NONE][0]['value'] + $entity->field_listing_sq_ft_below[LANGUAGE_NONE][0]['value']);
      }
      break;

    case 'drealty_listing':
      if ($entity->type == "mls_residential_listing") {
        $term_reference_fields = array(
          'development', 'city', 'school_district'
        );

        $document->addField('ts_field_mls', isset($entity->field_mls_number[LANGUAGE_NONE][0]['value'])
          ? $entity->field_mls_number[LANGUAGE_NONE][0]['value']
          : isset($entity->field_mls_number[0]['value']) ? $entity->field_mls_number[0]['value'] : NULL);
        $document->addField('fts_field_listing_list_price', isset($entity->field_mls_list_price[LANGUAGE_NONE][0]['value'])
          ? round($entity->field_mls_list_price[LANGUAGE_NONE][0]['value'])
          : isset($entity->field_mls_list_price[0]['value']) ? $entity->field_mls_list_price[0]['value'] : NULL);

        if (!empty($entity->field_mls_bedrooms[LANGUAGE_NONE][0]['value'])) {
          $document->addField('its_field_listing_bedrooms', $entity->field_mls_bedrooms[LANGUAGE_NONE][0]['value']);
        }
        elseif (!empty($entity->field_mls_bedrooms[0]['value'])) {
          $document->addField('its_field_listing_bedrooms', $entity->field_mls_bedrooms[0]['value']);
        }

        $document->addField('fts_field_listing_bathrooms', isset($entity->field_mls_bathrooms[LANGUAGE_NONE][0]['value'])
          ? $entity->field_mls_bathrooms[LANGUAGE_NONE][0]['value']
          : isset($entity->field_mls_bathrooms[0]['value']) ? $entity->field_mls_bathrooms[0]['value'] : NULL);
        $document->addField('fts_field_listing_acreage', isset($entity->field_mls_acreage[LANGUAGE_NONE][0]['value'])
          ? $entity->field_mls_acreage[LANGUAGE_NONE][0]['value']
          : isset($entity->field_mls_acreage[0]['value']) ? $entity->field_mls_acreage[0]['value'] : NULL);
        $document->addField('fs_field_sq_ft', isset($entity->field_mls_square_feet[LANGUAGE_NONE][0]['value'])
          ? $entity->field_mls_square_feet[LANGUAGE_NONE][0]['value']
          : isset($entity->field_mls_square_feet[0]['value']) ? $entity->field_mls_square_feet[0]['value'] : NULL);

        $document->addField('im_field_listing_township', isset($entity->field_mls_city[LANGUAGE_NONE][0]['tid'])
          ? $entity->field_mls_city[LANGUAGE_NONE][0]['tid']
          : isset($entity->field_mls_city[0]['tid']) ? $entity->field_mls_city[0]['tid'] : NULL);
        $document->addField('im_field_listing_school_district', isset($entity->field_mls_school_district[LANGUAGE_NONE][0]['tid'])
          ? $entity->field_mls_school_district[LANGUAGE_NONE][0]['tid']
          : isset($entity->field_mls_school_district[0]['tid']) ? $entity->field_mls_school_district[0]['tid'] : NULL);
      }
      break;
  }

  foreach ($term_reference_fields as $field) {
    $field_name = 'field_listing_' . $field;
    if (isset($entity->{$field_name}[LANGUAGE_NONE][0]['tid'])) {
      $document->addField('im_field_terms', $entity->{$field_name}[LANGUAGE_NONE][0]['tid']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_search_form_search_admin_settings_alter(&$form, &$form_state) {
  $form['indexing_throttle']['search_cron_limit']['#options'][0] = 0;
  $form['indexing_throttle']['search_cron_limit']['#disabled'] = TRUE;
  $form['indexing_throttle']['search_cron_limit']['#description'] .= '<strong><br/>' . t('This must remain 0 to prevent the Drupal search module (as opposed to ApacheSOLR) from indexing the site.') . '</strong>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_search_form_views_exposed_form_alter(&$form, &$form_state) {
  switch ($form['#id']) {
    case 'views-exposed-form-c21-search-listings-page':
      drupal_add_js(drupal_get_path('theme','escrow') . '/js/placeholder.js', array('scope' => 'footer', 'group' => JS_THEME));

      // Add some placeholder text to the search field.
      $form['keyword']['#placeholder'] = t('MLS#, keywords, etc.');

      // Convert town and school fields to select boxes.
      $form['im_field_listing_township']['#type'] = 'select';
      $form['im_field_listing_township']['#empty_option'] = t('- Any -');
      $form['im_field_listing_township']['#options'] = _c21_search_taxonomy_options_array('listing_township', 'ucwords');

      $form['im_field_listing_school_district']['#type'] = 'select';
      $form['im_field_listing_school_district']['#empty_option'] = t('- Any -');
      $form['im_field_listing_school_district']['#options'] = _c21_search_taxonomy_options_array('listing_school_district');

      // Add javascript to handle the facet sliders. Note that touch-punch does
      // not work when added asynchronously via "yesnope".
      $form['#attached']['js'][] = drupal_get_path('module', 'c21_search') . '/js/c21_search.js';
      $form['#attached']['js'][] = drupal_get_path('theme', 'escrow') . '/js/jquery.ui.touch-punch.min.js';

      // Add a toggle.
      $form['toggle'] = array(
        '#type' => 'markup',
        '#markup' => '<h2 class="toggle">' . t('Search Listings') . '</h2>',
      );
      $element_to_insert['filter-toggle'] = array(
        'value' => 'toggle',
      );
      $form['#info'] = array_merge($element_to_insert, $form['#info']);

      // Add a custom validation function.
      $form['#validate'][] = 'c21_search_form_validate';
      break;
  }
}

/**
 * Implements hook_apachesolr_environments_alter().
 *
 * Code needed to prevent overridden Features between environments.
 * ApacheSOLR module puts some time-related data into the Features
 * exports, which would normally cause things to go overridden right
 * away.
 *
 * @see https://drupal.org/node/1984502#comment-7950629
 */
function c21_search_apachesolr_environments_alter(&$data) {
  // Load the real data with the real temporal information.
  $environments = apachesolr_load_all_environments();

  // These keys are purely time-based and do not need to be considered.
  $ephemeral_items = array(
    'apachesolr_index_last',
    'apachesolr_index_updated',
    'apachesolr_last_optimize',
  );

  // Update the default configs with the current temporal configs so that these
  // keys do not cause these items to be overridden.
  foreach ($data as $key => $value) {
    $index = &$data[$key];
    foreach($ephemeral_items as $ephemeral_item) {
      if (isset($environments[$key]['conf'][$ephemeral_item])) {
        $index->conf[$ephemeral_item] = $environments[$key]['conf'][$ephemeral_item];
      }
    }
  }
}

/**
 * Form validation function.
 */
function c21_search_form_validate($form, &$form_state) {
  foreach ($form_state['view']->filter as $field => $filter) {
    if ($filter->definition['handler'] == 'apachesolr_views_handler_filter_numeric' && $filter->operator == 'between') {
      // If the inputted value is the maximum allowed value, increase it so that
      // all search results will be returned.
      if (isset($form_state['view']->exposed_input[$field]['max'])) {
        if ($form_state['values'][$field]['max'] >= $form_state['view']->exposed_input[$field]['max']) {
          $form_state['values'][$field]['max'] = 10000000;
        }
      }
    }
  }

}

/**
 * Returns a array of taxonomy terms for use with #options in a form field.
 */
function _c21_search_taxonomy_options_array($machine_name, $text_transform = '') {
  $options = array();
  $text_transform = function_exists($text_transform) ? $text_transform : '';

  $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $term) {
    $options[$term->tid] = empty($text_transform) ? $term->name : $text_transform($term->name);
  }
  return $options;
}


