<?php

/**
 * Implements hook_schema().
 */
function c21_listings_schema() {
  $schema['c21_listings_term_normalization'] = array(
    'description' => 'Term mapping to use during an MLS import',
    'fields' => array(
      'tid' => array(
        'description' => 'The tid of the term to map to',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'term_to_normalize' => array(
        'description' => 'A string which when encountered should be set to the corresponding tid',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function c21_listings_install() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing_type')
    ->execute();
  $nodes = empty($entities) ? array() : node_load_multiple(array_keys($entities['node']));

  if (empty($nodes)) {

    $listing_types = array(
      'Open',
      'Exclusive',
      'Exclusive Right',
    );

    foreach ($listing_types as $listing_type) {
      $values = array(
        'type' => 'listing_type',
        'uid' => 1,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($listing_type);

      $ewrapper->save(true);
      entity_save('node', $entity);
    }
  }

  c21_listings_update_7001();
}

/**
 * Implements hook_uninstall().
 */
function c21_listings_uninstall() {
  $fid = variable_get('c21_listings_default_featured_photo_fid', FALSE);
  if ($fid) {
    $file = file_load($fid);
    file_delete($file, TRUE);
    variable_del('c21_listings_default_featured_photo_fid');
  }
}

/**
 * Add a default image to be used by the "featured photo" if one is not set.
 */
function c21_listings_update_7001() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-photo.jpg',
    'file_name' => 'no-photo.jpg',
    'variable' => 'c21_listings_default_featured_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Set Roy & Ed as "owners".
 */
function c21_listings_update_7002() {
  $owners = array('Hull', 'Raarup');

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'agent')
    ->fieldCondition('field_agent_last_name', 'value', $owners);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $entity->field_agent_status[LANGUAGE_NONE][0]['value'] = 'owner';
      entity_save('node', $entity);
    }
  }
}

/**
 * Move terms from "additional building" vocab to "outside features".
 */
function c21_listings_update_7003(&$sandbox) {
  $source = 'listing_additional_building';
  $destination = 'listing_outside_features';
  $source_vocab = taxonomy_vocabulary_machine_name_load($source);
  $destination_vocab = taxonomy_vocabulary_machine_name_load($destination);

  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;

    // Migrate terms from the additional building vocabulary to the new outside
    // features vocabulary.
    $terms = taxonomy_get_tree($source_vocab->vid, 0, NULL, TRUE);
    foreach ($terms as $term) {
      $term->vid = $destination_vocab->vid;
      taxonomy_term_save($term);
    }
  }
  else {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing')
      ->range($sandbox['progress'], $sandbox['items_per_pass']);
    $result = $query->execute();

    if (!empty($result['node'])) {
      $entities = entity_load('node', array_keys($result['node']));
      foreach ($entities as $entity) {
        $needs_save = FALSE;

        // Check if there is value for additional building and move it to the
        // outside features field.
        if (isset($entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'])) {
          $tid = $entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'];
          $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $tid);
          $needs_save = TRUE;
        }

        // Check for a value of the "decks" field & "porch" field.
        $fields = array('decks', 'porch');
        foreach ($fields as $field) {
          if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
          ) {
            $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'] . ' ' . ($field == 'decks' ? 'deck' : 'porch');
            $values = explode(',', $values);
            foreach ($values as $value) {
              $value = strtolower(trim($value));
              $terms = taxonomy_get_term_by_name($value, $destination);
              if (empty($terms)) {
                $term = new stdClass();
                $term->vid = $destination_vocab->vid;
                $term->name = $value;
                taxonomy_term_save($term);
              }
              else {
                $term = array_pop($terms);
              }
              $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $term->tid);
            }
            $needs_save = TRUE;
          }
        }

        if ($needs_save) {
          entity_save('node', $entity);
        }

        $sandbox['progress']++;
      }
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Delete the additional bldg, porch, & decks fields.
 */
function c21_listings_update_7004() {
  field_delete_field('listing_additional_bldg');
  field_delete_field('listing_porch');
  field_delete_field('listing_decks');
}

/**
 * Make style, fireplace & siding taxonomies.
 */
function c21_listings_update_7005(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing')
    ->range($sandbox['progress'], $sandbox['items_per_pass']);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $needs_save = FALSE;

      // Check for a value of the "decks" field & "porch" field.
      $fields = array('style', 'fireplace', 'siding');
      foreach ($fields as $field) {
        $destination = 'listing_' . $field . '_info';
        $destination_vocab = taxonomy_vocabulary_machine_name_load('listing_' . $field);

        if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
        ) {
          $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'];
          $values = explode(',', $values);
          foreach ($values as $value) {
            $value = strtolower(trim($value));
            $terms = taxonomy_get_term_by_name($value, 'listing_' . $field);
            if (empty($terms)) {
              $term = new stdClass();
              $term->vid = $destination_vocab->vid;
              $term->name = $value;
              taxonomy_term_save($term);
            }
            else {
              $term = array_pop($terms);
            }
            $entity->{'field_' . $destination}[LANGUAGE_NONE][] = array('tid' => $term->tid);
          }
          $needs_save = TRUE;
        }
      }

      if ($needs_save) {
        entity_save('node', $entity);
      }

      $sandbox['progress']++;
    }
  }
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Add a default image to be used by the "agent photo" if one is not set.
 */
function c21_listings_update_7006() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-headshot.jpg',
    'file_name' => 'no-headshot.jpg',
    'variable' => 'c21_agents_default_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Enable imagefield focus.
 */
function c21_listings_update_7007() {
  module_enable(array('imagefield_focus'));
}

/**
 * Disable imagefield focus and enable focal point.
 */
function c21_listings_update_7008() {
  module_disable(array('imagefield_focus'));
  module_enable(array('focal_point'));
}

/**
 * Make sure that all listings have a featured photo if there is a photo
 * available.
 */
function c21_listings_update_7009() {
  $q = db_select('node', 'n');
  $q->fields('n', array())
    ->condition('n.type', 'listing', '=')
    ->addJoin('LEFT', 'field_data_field_listing_featured_photo', 'flfp', 'flfp.entity_id = n.nid');
  $q->isNull('flfp.field_listing_featured_photo_fid');
  $result = $q->execute()->fetchAllAssoc('nid');

  foreach ($result as $nid => $node) {
    $node = node_load($nid);
    if (!empty($node->field_listing_photos[LANGUAGE_NONE])) {
      $node->field_listing_featured_photo = array(
        LANGUAGE_NONE => array($node->field_listing_photos[LANGUAGE_NONE][0]),
      );
      unset($node->field_listing_photos[LANGUAGE_NONE][0]);

      node_save($node);
    }
  }
}

/**
 * Fix the spelling of Delaware in the notes field.
 */
function c21_listings_update_7010() {
  $tables = array('field_data_field_listing_notes', 'field_revision_field_listing_notes');

  foreach ($tables as $table) {
    $q = db_select($table, 'fn');
    $q->fields('fn', array('entity_id', 'revision_id', 'field_listing_notes_value'))
      ->condition('fn.field_listing_notes_value', '%Deleware%', 'LIKE');
    $result = $q->execute()->fetchAllAssoc('entity_id');

    foreach ($result as $entity_id => $data) {
      db_update($table)
        ->fields(array(
          'field_listing_notes_value' => str_replace('Deleware', 'Delaware', $data->field_listing_notes_value),
        ))
        ->condition('entity_id', $entity_id)
        ->condition('revision_id', $data->revision_id)
        ->execute();
    }
  }
}

/**
 * Fix missing fireplace, siding and style data.
 */
function c21_listings_update_7011() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, l.style, lbd.fireplace, lbd.siding FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    module_load_include('module', 'c21_listings');
    $nid = _c21_listing_get_nid($legacy_record->listing_id);
    $vid = _c21_listing_get_vid($nid);
    if (!$nid || !$vid) {
      continue;
    }

    // Update the field and field revision tables with the needed data.
    $columns = array('fireplace', 'siding', 'style');
    foreach ($columns as $column) {
      // If the column in question has no legacy data, skip to the next column.
      if (empty($legacy_record->{$column})) {
        continue;
      }

      // Grab the necessary taxonomy information.
      $legacy_value = strtolower($legacy_record->{$column});
      $tid = db_select('migrate_map_c21termslisting' . $column, 'm')
        ->fields('m', array('destid1'))
        ->condition('m.sourceid1', $legacy_value, '=')
        ->execute()
        ->fetchField();
      if (empty($tid)) {
        continue;
      }

      try {
        db_query('INSERT INTO field_data_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
        db_query('INSERT INTO field_revision_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
      }
      catch (Exception $e) {}
    }
  }
}

/**
 * Fix missing outside feature data.
 */
function c21_listings_update_7012() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, lbd.add_building FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    // Parse out the nid
    $nid_parts = explode('-', $legacy_record->listing_id);
    if (is_array($nid_parts) && count($nid_parts) == 2) {
      $nid = array_pop($nid_parts);
      if (!is_numeric($nid)) {
        continue;
      }
    }

    // Grab the revision id from the listing node in question.
    $vid = db_select('node', 'n')
      ->fields('n', array('vid'))
      ->condition('n.nid', $nid, '=')
      ->execute()
      ->fetchField();
    if (!is_numeric($vid)) {
      continue;
    }

    // If the column in question has no legacy data, skip to the next column.
    if (empty($legacy_record->add_building)) {
      continue;
    }

    // Grab the necessary taxonomy information.
    $legacy_value = strtolower($legacy_record->add_building);
    $tid = db_select('migrate_map_c21termslistingoutsidefeatures', 'm')
      ->fields('m', array('destid1'))
      ->condition('m.sourceid1', $legacy_value, '=')
      ->execute()
      ->fetchField();
    if (empty($tid)) {
      continue;
    }

    try {
      db_query('INSERT INTO field_data_field_listing_outside_features (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_outside_features_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
      db_query('INSERT INTO field_revision_field_listing_outside_features (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_outside_features_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
    }
    catch (Exception $e) {}
  }
}

/**
 * Add a table to the database for term normalization.
 */
function c21_listings_update_7013() {
  //Check if table exists, if not install the schema.
  if(db_table_exists('c21_listings_term_normalization') == FALSE) {
    drupal_install_schema('c21_listings');
  }
}

/**
 * Fix missing "year built" data.
 */
function c21_listings_update_7014(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing')
    ->range($sandbox['progress'], $sandbox['items_per_pass']);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      // Check how many revisions there are for this node.
      $query = db_select('node_revision', 'nr')
        ->fields('nid', array('nid'))
        ->condition('nid', $entity->nid);
      $revision_count = $query->countQuery()->execute()->fetchField();

      // If there is legacy data, grab the "year built".
      if ($revision_count > 1 && !empty($entity->field_listing_legacy_data[LANGUAGE_NONE][0]['value'])) {
        $legacy_data = drupal_json_decode($entity->field_listing_legacy_data[LANGUAGE_NONE][0]['value']);
        $year_built = is_integer($legacy_data['year_built']) ? $legacy_data['year_built'] . '-01-01 00:00:00' : NULL;
        $entity->field_listing_year_built[LANGUAGE_NONE][0] = array('value' => $year_built);
        entity_save('node', $entity);
      }

      $sandbox['progress']++;
    }
  }
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Fix missing family room, floor 2.
 */
function c21_listings_update_7015() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query("SELECT lm.listing_id, lm.measurement FROM listing_measurements AS lm WHERE lm.floor = 2 AND lm.room = 'familyroom'");
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    // Parse out the nid
    $nid_parts = explode('-', $legacy_record->listing_id);
    if (is_array($nid_parts) && count($nid_parts) == 2) {
      $nid = array_pop($nid_parts);
      if (!is_numeric($nid)) {
        continue;
      }
    }

    if ($node = node_load($nid)) {
      $node->field_listing_family_room_f2[LANGUAGE_NONE][0] = array('value' => $legacy_record->measurement);
      node_save($node);
    }
  }
}

/**
 * Fix missing fireplace, siding and style data... again!
 */
function c21_listings_update_7016() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, l.style, lbd.fireplace, lbd.siding FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    module_load_include('module', 'c21_listings');
    $nid = _c21_listing_get_nid($legacy_record->listing_id);
    $vid = _c21_listing_get_vid($nid);
    if (!$nid || !$vid) {
      continue;
    }

    // Update the field and field revision tables with the needed data.
    $columns = array('fireplace', 'siding', 'style');
    foreach ($columns as $column) {
      // If the column in question has no legacy data, skip to the next column.
      if (empty($legacy_record->{$column})) {
        continue;
      }

      // Grab the necessary taxonomy information.
      $legacy_value = strtolower($legacy_record->{$column});
      $tid = db_select('migrate_map_c21termslisting' . $column, 'm')
        ->fields('m', array('destid1'))
        ->condition('m.sourceid1', $legacy_value, '=')
        ->execute()
        ->fetchField();
      if (empty($tid)) {
        continue;
      }

      $vocabulary = taxonomy_vocabulary_machine_name_load('listing_' . $column);
      // If the tid does not have a term associated with it, then create one.
      $term = taxonomy_term_load($tid);
      if (!$term) {
        // Before creating a new term, check if an exact match exists.
        $terms = taxonomy_get_term_by_name($legacy_value, $vocabulary->vid);
        if (!empty($terms)) {
          $term = array_pop($terms);
        }
        else {
          $term = (object) array(
            'name' => $legacy_value,
            'vid' => $vocabulary->vid,
          );
          taxonomy_term_save($term);
        }
        $tid = $term->tid;
      }

      try {
        db_query('INSERT INTO field_data_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
        db_query('INSERT INTO field_revision_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
      }
      catch (Exception $e) {}
    }
  }
}

/**
 * Fix missing year built... again!
 */
function c21_listings_update_7017() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, lbd.year_built FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    if (is_numeric($legacy_record->year_built) && $legacy_record->year_built > 0) {
      module_load_include('module', 'c21_listings');
      $nid = _c21_listing_get_nid($legacy_record->listing_id);
      $vid = _c21_listing_get_vid($nid);
      if (!$nid || !$vid) {
        continue;
      }

      $result = db_query('SELECT * FROM {field_data_field_listing_year_built} WHERE entity_id = ' . $nid);
      $year_built = "'" . $legacy_record->year_built . "-01-01 00:00:00'";

      try {
        if ($result->rowCount()) {
          db_query('UPDATE {field_data_field_listing_year_built} SET field_listing_year_built_value = ' . $year_built . ' WHERE entity_id = ' . $nid);
          db_query('UPDATE {field_revision_field_listing_year_built} SET field_listing_year_built_value = ' . $year_built . ' WHERE entity_id = ' . $nid);
        }
        else {
          db_query('INSERT INTO {field_data_field_listing_year_built} (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_year_built_value) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $year_built . ')');
          db_query('INSERT INTO {field_revision_field_listing_year_built} (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_year_built_value) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $year_built . ')');
        }
      }
      catch (Exception $e) {}
    }
  }
}

/**
 * Fix missing family room ... again!
 */
function c21_listings_update_7018() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query("select * from {listing_measurements} where room = 'familyroom'");
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    module_load_include('module', 'c21_listings');
    $nid = _c21_listing_get_nid($legacy_record->listing_id);
    $vid = _c21_listing_get_vid($nid);
    if (!$nid || !$vid) {
      continue;
    }

    $column = 'family_room_' . ($legacy_record->floor == 0 ? 'b' : 'f' . $legacy_record->floor);
    $measurement = $legacy_record->measurement;
    $result = db_query('SELECT * FROM {field_data_field_listing_' . $column . '} WHERE entity_id = ' . $nid);

    try {
      if ($result->rowCount()) {
        $fields = array(
          'field_listing_' . $column . '_value' => $measurement,
        );
        db_update('field_data_field_listing_' . $column)->fields($fields)->condition('entity_id', $nid)->execute();
        db_update('field_revision_field_listing_' . $column)->fields($fields)->condition('entity_id', $nid)->execute();
      }
      else {
        $fields = array(
          'entity_type' => 'node',
          'bundle' => 'listing',
          'entity_id' => $nid,
          'revision_id' => $vid,
          'language' => LANGUAGE_NONE,
          'delta' => 0,
          'field_listing_' . $column . '_value' => $measurement,
        );

        db_insert('field_data_field_listing_' . $column)->fields($fields)->execute();
        db_insert('field_revision_field_listing_' . $column)->fields($fields)->execute();
      }
    }
    catch (Exception $e) {}
  }
}

/**
 * Fixing outside features.
 */
function c21_listings_update_7019() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query("SELECT listing_id, decks, porch, add_building FROM {listing_building_dtl}");
  $legacy_data = $result->fetchAll();
  $legacy_columns = array('decks' => 'deck(s)', 'porch' => 'porch(es)', 'add_building' => 'outdoor structure(s)');

  // Change db connection back to default.
  db_set_active('default');

  // Prepare to dig into the correct taxonomy.
  $vocabulary = taxonomy_vocabulary_machine_name_load('listing_outside_features');

  foreach ($legacy_data as $legacy_record) {
    module_load_include('module', 'c21_listings');
    $nid = _c21_listing_get_nid($legacy_record->listing_id);
    $vid = _c21_listing_get_vid($nid);
    if (!$nid || !$vid) {
      continue;
    }

    $legacy_values = array();
    foreach ($legacy_columns as $column => $column_title) {
      $legacy_value = strtolower($legacy_record->{$column});
      $legacy_value = str_replace('yes', $column_title, $legacy_value);
      $legacy_values = array_merge($legacy_values, explode(',', $legacy_value));

      foreach ($legacy_values as &$legacy_value) {
        // Do a bunch of cleanup
        $legacy_value = str_replace('*', '', $legacy_value);
        $legacy_value = trim($legacy_value);
        if (is_numeric($legacy_value)) {
          $legacy_value = $legacy_value . ' ' . $column_title;
        }
      }
    }
    $legacy_values = array_unique($legacy_values);

    foreach ($legacy_values as $legacy_value) {
      $terms = taxonomy_get_term_by_name($legacy_value, $vocabulary->vid);
      if (!empty($terms)) {
        $term = array_pop($terms);
      }
      else {
        $term = (object) array(
          'name' => $legacy_value,
          'vid' => $vocabulary->vid,
        );
        taxonomy_term_save($term);
      }
      $tid = $term->tid;

      $result = db_query('SELECT * FROM {field_data_field_listing_outside_features} WHERE entity_id = ' . $nid . ' and field_listing_outside_features_tid = ' . $tid . ' ORDER BY delta');
      try {
        if ($result->rowCount() == 0) {
          $delta = db_query('SELECT delta FROM {field_data_field_listing_outside_features} WHERE entity_id = ' . $nid . ' ORDER BY delta DESC')->fetchField();
          $fields = array(
            'entity_type' => 'node',
            'bundle' => 'listing',
            'entity_id' => $nid,
            'revision_id' => $vid,
            'language' => LANGUAGE_NONE,
            'delta' => ++$delta,
            'field_listing_outside_features_tid' => $tid,
          );
          db_insert('field_data_field_listing_outside_features')->fields($fields)->execute();
          db_insert('field_revision_field_listing_outside_features')->fields($fields)->execute();
        }
      }
      catch (Exception $e) {}
    }
  }
}

/**
 * Enable multiupload widget.
 */
function c21_listings_update_7020() {
  module_enable(array('multiupload_imagefield_widget'));
}

/**
 * Enable grid module.
 */
function c21_listings_update_7021() {
  module_enable(array('grid'));
}

/**
 * Migrate measurement data.
 */
function c21_listings_update_7022() {
  $result = db_query("SELECT n.nid, n.vid, bathroom1_b.field_listing_bathroom1_b_value, bathroom1_f1.field_listing_bathroom1_f1_value, bathroom1_f2.field_listing_bathroom1_f2_value, bathroom2_b.field_listing_bathroom2_b_value, bathroom2_f1.field_listing_bathroom2_f1_value, bathroom2_f2.field_listing_bathroom2_f2_value, bathroom3_b.field_listing_bathroom3_b_value, bathroom3_f1.field_listing_bathroom3_f1_value, bathroom3_f2.field_listing_bathroom3_f2_value, bedroom1_b.field_listing_bedroom1_b_value, bedroom1_f1.field_listing_bedroom1_f1_value, bedroom1_f2.field_listing_bedroom1_f2_value, bedroom2_b.field_listing_bedroom2_b_value, bedroom2_f1.field_listing_bedroom2_f1_value, bedroom2_f2.field_listing_bedroom2_f2_value, bedroom3_b.field_listing_bedroom3_b_value, bedroom3_f1.field_listing_bedroom3_f1_value, bedroom3_f2.field_listing_bedroom3_f2_value, bedroom4_b.field_listing_bedroom4_b_value, bedroom4_f1.field_listing_bedroom4_f1_value, bedroom4_f2.field_listing_bedroom4_f2_value, bedroom5_b.field_listing_bedroom5_b_value, bedroom5_f1.field_listing_bedroom5_f1_value, bedroom5_f2.field_listing_bedroom5_f2_value, din_kitchen_b.field_listing_din_kitchen_b_value, din_kitchen_f1.field_listing_din_kitchen_f1_value, din_kitchen_f2.field_listing_din_kitchen_f2_value, dining_room_b.field_listing_dining_room_b_value, dining_room_f1.field_listing_dining_room_f1_value, dining_room_f2.field_listing_dining_room_f2_value, family_room_b.field_listing_family_room_b_value, family_room_f1.field_listing_family_room_f1_value, family_room_f2.field_listing_family_room_f2_value, kitchen_b.field_listing_kitchen_b_value, kitchen_f1.field_listing_kitchen_f1_value, kitchen_f2.field_listing_kitchen_f2_value, laundry_b.field_listing_laundry_b_value, laundry_f1.field_listing_laundry_f1_value, laundry_f2.field_listing_laundry_f2_value, liv_din_b.field_listing_liv_din_b_value, liv_din_f1.field_listing_liv_din_f1_value, liv_din_f2.field_listing_liv_din_f2_value, living_room_b.field_listing_living_room_b_value, living_room_f1.field_listing_living_room_f1_value, living_room_f2.field_listing_living_room_f2_value, other1_b.field_listing_other1_b_value, other1_f1.field_listing_other1_f1_value, other1_f2.field_listing_other1_f2_value, other2_b.field_listing_other2_b_value, other2_f1.field_listing_other2_f1_value, other2_f2.field_listing_other2_f2_value, other3_b.field_listing_other3_b_value, other3_f1.field_listing_other3_f1_value, other3_f2.field_listing_other3_f2_value
    FROM node as n
    LEFT JOIN field_data_field_listing_bathroom1_b as bathroom1_b ON n.nid = bathroom1_b.entity_id
    LEFT JOIN field_data_field_listing_bathroom1_f1 as bathroom1_f1 ON n.nid = bathroom1_f1.entity_id
    LEFT JOIN field_data_field_listing_bathroom1_f2 as bathroom1_f2 ON n.nid = bathroom1_f2.entity_id
    LEFT JOIN field_data_field_listing_bathroom2_b as bathroom2_b ON n.nid = bathroom2_b.entity_id
    LEFT JOIN field_data_field_listing_bathroom2_f1 as bathroom2_f1 ON n.nid = bathroom2_f1.entity_id
    LEFT JOIN field_data_field_listing_bathroom2_f2 as bathroom2_f2 ON n.nid = bathroom2_f2.entity_id
    LEFT JOIN field_data_field_listing_bathroom3_b as bathroom3_b ON n.nid = bathroom3_b.entity_id
    LEFT JOIN field_data_field_listing_bathroom3_f1 as bathroom3_f1 ON n.nid = bathroom3_f1.entity_id
    LEFT JOIN field_data_field_listing_bathroom3_f2 as bathroom3_f2 ON n.nid = bathroom3_f2.entity_id
    LEFT JOIN field_data_field_listing_bedroom1_b as bedroom1_b ON n.nid = bedroom1_b.entity_id
    LEFT JOIN field_data_field_listing_bedroom1_f1 as bedroom1_f1 ON n.nid = bedroom1_f1.entity_id
    LEFT JOIN field_data_field_listing_bedroom1_f2 as bedroom1_f2 ON n.nid = bedroom1_f2.entity_id
    LEFT JOIN field_data_field_listing_bedroom2_b as bedroom2_b ON n.nid = bedroom2_b.entity_id
    LEFT JOIN field_data_field_listing_bedroom2_f1 as bedroom2_f1 ON n.nid = bedroom2_f1.entity_id
    LEFT JOIN field_data_field_listing_bedroom2_f2 as bedroom2_f2 ON n.nid = bedroom2_f2.entity_id
    LEFT JOIN field_data_field_listing_bedroom3_b as bedroom3_b ON n.nid = bedroom3_b.entity_id
    LEFT JOIN field_data_field_listing_bedroom3_f1 as bedroom3_f1 ON n.nid = bedroom3_f1.entity_id
    LEFT JOIN field_data_field_listing_bedroom3_f2 as bedroom3_f2 ON n.nid = bedroom3_f2.entity_id
    LEFT JOIN field_data_field_listing_bedroom4_b as bedroom4_b ON n.nid = bedroom4_b.entity_id
    LEFT JOIN field_data_field_listing_bedroom4_f1 as bedroom4_f1 ON n.nid = bedroom4_f1.entity_id
    LEFT JOIN field_data_field_listing_bedroom4_f2 as bedroom4_f2 ON n.nid = bedroom4_f2.entity_id
    LEFT JOIN field_data_field_listing_bedroom5_b as bedroom5_b ON n.nid = bedroom5_b.entity_id
    LEFT JOIN field_data_field_listing_bedroom5_f1 as bedroom5_f1 ON n.nid = bedroom5_f1.entity_id
    LEFT JOIN field_data_field_listing_bedroom5_f2 as bedroom5_f2 ON n.nid = bedroom5_f2.entity_id
    LEFT JOIN field_data_field_listing_din_kitchen_b as din_kitchen_b ON n.nid = din_kitchen_b.entity_id
    LEFT JOIN field_data_field_listing_din_kitchen_f1 as din_kitchen_f1 ON n.nid = din_kitchen_f1.entity_id
    LEFT JOIN field_data_field_listing_din_kitchen_f2 as din_kitchen_f2 ON n.nid = din_kitchen_f2.entity_id
    LEFT JOIN field_data_field_listing_dining_room_b as dining_room_b ON n.nid = dining_room_b.entity_id
    LEFT JOIN field_data_field_listing_dining_room_f1 as dining_room_f1 ON n.nid = dining_room_f1.entity_id
    LEFT JOIN field_data_field_listing_dining_room_f2 as dining_room_f2 ON n.nid = dining_room_f2.entity_id
    LEFT JOIN field_data_field_listing_family_room_b as family_room_b ON n.nid = family_room_b.entity_id
    LEFT JOIN field_data_field_listing_family_room_f1 as family_room_f1 ON n.nid = family_room_f1.entity_id
    LEFT JOIN field_data_field_listing_family_room_f2 as family_room_f2 ON n.nid = family_room_f2.entity_id
    LEFT JOIN field_data_field_listing_kitchen_b as kitchen_b ON n.nid = kitchen_b.entity_id
    LEFT JOIN field_data_field_listing_kitchen_f1 as kitchen_f1 ON n.nid = kitchen_f1.entity_id
    LEFT JOIN field_data_field_listing_kitchen_f2 as kitchen_f2 ON n.nid = kitchen_f2.entity_id
    LEFT JOIN field_data_field_listing_laundry_b as laundry_b ON n.nid = laundry_b.entity_id
    LEFT JOIN field_data_field_listing_laundry_f1 as laundry_f1 ON n.nid = laundry_f1.entity_id
    LEFT JOIN field_data_field_listing_laundry_f2 as laundry_f2 ON n.nid = laundry_f2.entity_id
    LEFT JOIN field_data_field_listing_liv_din_b as liv_din_b ON n.nid = liv_din_b.entity_id
    LEFT JOIN field_data_field_listing_liv_din_f1 as liv_din_f1 ON n.nid = liv_din_f1.entity_id
    LEFT JOIN field_data_field_listing_liv_din_f2 as liv_din_f2 ON n.nid = liv_din_f2.entity_id
    LEFT JOIN field_data_field_listing_living_room_b as living_room_b ON n.nid = living_room_b.entity_id
    LEFT JOIN field_data_field_listing_living_room_f1 as living_room_f1 ON n.nid = living_room_f1.entity_id
    LEFT JOIN field_data_field_listing_living_room_f2 as living_room_f2 ON n.nid = living_room_f2.entity_id
    LEFT JOIN field_data_field_listing_other1_b as other1_b ON n.nid = other1_b.entity_id
    LEFT JOIN field_data_field_listing_other1_f1 as other1_f1 ON n.nid = other1_f1.entity_id
    LEFT JOIN field_data_field_listing_other1_f2 as other1_f2 ON n.nid = other1_f2.entity_id
    LEFT JOIN field_data_field_listing_other2_b as other2_b ON n.nid = other2_b.entity_id
    LEFT JOIN field_data_field_listing_other2_f1 as other2_f1 ON n.nid = other2_f1.entity_id
    LEFT JOIN field_data_field_listing_other2_f2 as other2_f2 ON n.nid = other2_f2.entity_id
    LEFT JOIN field_data_field_listing_other3_b as other3_b ON n.nid = other3_b.entity_id
    LEFT JOIN field_data_field_listing_other3_f1 as other3_f1 ON n.nid = other3_f1.entity_id
    LEFT JOIN field_data_field_listing_other3_f2 as other3_f2 ON n.nid = other3_f2.entity_id
    WHERE field_listing_bathroom1_b_value IS NOT NULL OR field_listing_bathroom1_f1_value IS NOT NULL OR field_listing_bathroom1_f2_value IS NOT NULL OR field_listing_bathroom2_b_value IS NOT NULL OR field_listing_bathroom2_f1_value IS NOT NULL OR field_listing_bathroom2_f2_value IS NOT NULL OR field_listing_bathroom3_b_value IS NOT NULL OR field_listing_bathroom3_f1_value IS NOT NULL OR field_listing_bathroom3_f2_value IS NOT NULL OR field_listing_bedroom1_b_value IS NOT NULL OR field_listing_bedroom1_f1_value IS NOT NULL OR field_listing_bedroom1_f2_value IS NOT NULL OR field_listing_bedroom2_b_value IS NOT NULL OR field_listing_bedroom2_f1_value IS NOT NULL OR field_listing_bedroom2_f2_value IS NOT NULL OR field_listing_bedroom3_b_value IS NOT NULL OR field_listing_bedroom3_f1_value IS NOT NULL OR field_listing_bedroom3_f2_value IS NOT NULL OR field_listing_bedroom4_b_value IS NOT NULL OR field_listing_bedroom4_f1_value IS NOT NULL OR field_listing_bedroom4_f2_value IS NOT NULL OR field_listing_bedroom5_b_value IS NOT NULL OR field_listing_bedroom5_f1_value IS NOT NULL OR field_listing_bedroom5_f2_value IS NOT NULL OR field_listing_din_kitchen_b_value IS NOT NULL OR field_listing_din_kitchen_f1_value IS NOT NULL OR field_listing_din_kitchen_f2_value IS NOT NULL OR field_listing_dining_room_b_value IS NOT NULL OR field_listing_dining_room_f1_value IS NOT NULL OR field_listing_dining_room_f2_value IS NOT NULL OR field_listing_family_room_b_value IS NOT NULL OR field_listing_family_room_f1_value IS NOT NULL OR field_listing_family_room_f2_value IS NOT NULL OR field_listing_kitchen_b_value IS NOT NULL OR field_listing_kitchen_f1_value IS NOT NULL OR field_listing_kitchen_f2_value IS NOT NULL OR field_listing_laundry_b_value IS NOT NULL OR field_listing_laundry_f1_value IS NOT NULL OR field_listing_laundry_f2_value IS NOT NULL OR field_listing_liv_din_b_value IS NOT NULL OR field_listing_liv_din_f1_value IS NOT NULL OR field_listing_liv_din_f2_value IS NOT NULL OR field_listing_living_room_b_value IS NOT NULL OR field_listing_living_room_f1_value IS NOT NULL OR field_listing_living_room_f2_value IS NOT NULL OR field_listing_other1_b_value IS NOT NULL OR field_listing_other1_f1_value IS NOT NULL OR field_listing_other1_f2_value IS NOT NULL OR field_listing_other2_b_value IS NOT NULL OR field_listing_other2_f1_value IS NOT NULL OR field_listing_other2_f2_value IS NOT NULL OR field_listing_other3_b_value IS NOT NULL OR field_listing_other3_f1_value IS NOT NULL OR field_listing_other3_f2_value IS NOT NULL
    ");
  $old_records = $result->fetchAll();

  foreach ($old_records as $old_record) {
    $measurements = array();
    foreach (c21_listings_get_rooms() as $room => $room_name) {
      foreach (c21_listings_get_floors() as $floor => $floor_name) {
        $new_key = drupal_html_class($room_name) . '_' . drupal_html_class($floor_name);
        $column = 'field_listing_' . $room . '_' . $floor . '_value';
        $measurements[$new_key] = $old_record->{$column};
      }
    }

    $new_record = array(
      'entity_type' => 'node',
      'bundle' => 'listing',
      'deleted' => 0,
      'entity_id' => $old_record->nid,
      'revision_id' => $old_record->vid,
      'language' => LANGUAGE_NONE,
      'delta' => 0,
      'field_listing_measurements_value' => serialize($measurements),
    );

    drupal_write_record('field_data_field_listing_measurements',$new_record);
    drupal_write_record('field_revision_field_listing_measurements',$new_record);
  }
}

/**
 * Delete deprecated measurement fields.
 */
function c21_listings_update_7023() {
  foreach (c21_listings_get_rooms() as $room => $room_name) {
    foreach (c21_listings_get_floors() as $floor => $floor_name) {
      field_delete_field('field_listing_' . $room . '_' . $floor);
    }
  }
}

/**
 * Move all buyer & seller data to the new non-field collection fields.
 */
function c21_listings_update_7024() {
  foreach (array('buyer', 'seller') as $ilk) {
    // Get existing buyer/seller data.
    $data = db_query("
SELECT DISTINCT
  ls.entity_id AS entity_id,
  ls.delta AS delta,
  sfn.field_" . $ilk . "_first_name_value AS firstname,
  sln.field_" . $ilk . "_last_name_value AS lastname,
  sa.field_" . $ilk . "_address_country AS country,
  sa.field_" . $ilk . "_address_administrative_area AS state,
  sa.field_" . $ilk . "_address_locality AS city,
  sa.field_" . $ilk . "_address_postal_code AS zip,
  sa.field_" . $ilk . "_address_thoroughfare AS street,
  sa.field_" . $ilk . "_address_premise AS street2,
  sc.field_" . $ilk . "_company_value AS company
FROM
  {field_data_field_listing_" . $ilk . "} AS ls
LEFT JOIN
  {field_data_field_" . $ilk . "_first_name} AS sfn ON ls.field_listing_" . $ilk . "_value = sfn.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_last_name} AS sln ON ls.field_listing_" . $ilk . "_value = sln.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_address} AS sa ON ls.field_listing_" . $ilk . "_value = sa.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_company} AS sc ON ls.field_listing_" . $ilk . "_value = sc.entity_id
    ");

    foreach ($data as $record) {
      $record->phone_numbers = array();
      $record->email_addresses = array();

      // Get the phone numbers.
      $phone_numbers = db_query("
SELECT DISTINCT
  spn.field_" . $ilk . "_phone_number_value AS phone_number,
  spt.field_" . $ilk . "_phone_type_value AS phone_type
FROM
  {field_data_field_listing_" . $ilk . "} AS ls
LEFT JOIN
  {field_data_field_" . $ilk . "_phone} AS sp ON ls.field_listing_" . $ilk . "_value = sp.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_phone_number} AS spn ON sp.field_" . $ilk . "_phone_value = spn.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_phone_type} AS spt ON sp.field_" . $ilk . "_phone_value = spt.entity_id
WHERE
  ls.entity_id = :eid
ORDER BY
  sp.delta
      ", array(':eid' => $record->entity_id));
      foreach ($phone_numbers as $number) {
        $record->phone_numbers[] = $number;
      }

      // Get the email address(es).
      $email_addresses = db_query("
SELECT DISTINCT
  sea.field_" . $ilk . "_email_address_value AS email_address,
  sety.field_" . $ilk . "_email_type_value AS email_type
FROM
  {field_data_field_listing_" . $ilk . "} AS ls
LEFT JOIN
  {field_data_field_" . $ilk . "_email} AS se ON ls.field_listing_" . $ilk . "_value = se.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_email_address} AS sea ON se.field_" . $ilk . "_email_value = sea.entity_id
LEFT JOIN
  {field_data_field_" . $ilk . "_email_type} AS sety ON se.field_" . $ilk . "_email_value = sety.entity_id
WHERE
  ls.entity_id = :eid
ORDER BY
  se.delta
      ", array(':eid' => $record->entity_id));
      foreach ($email_addresses as $email) {
        $record->email_addresses[] = $email;
      }

      // Save the data in the new fields.
      if ($record->delta > 1) { continue; }
      $num = $record->delta == 0 ? 1 : 2;
      $tbl_types = array('data', 'revision');
      $replacements = array(
        ':type' => "node",
        ':bundle' => "listing",
        ':lang' => LANGUAGE_NONE,
        ':eid' => $record->entity_id,
        ':vid' => $record->entity_id,
      );

      foreach ($tbl_types as $tbl) {
        if (!empty($record->firstname) || !empty($record->lastname)) {
          db_query("INSERT INTO {field_" . $tbl . "_field_listing_" . $ilk . $num . "_name} VALUES (:type, :bundle, 0, :eid, :vid, :lang, 0, :firstname, :lastname)", array(
            ':firstname' => $record->firstname,
            ':lastname' => $record->lastname
          ) + $replacements);
        }
        if (!empty($record->company)) {
          db_query("INSERT INTO {field_" . $tbl . "_field_listing_" . $ilk . $num . "_company} VALUES (:type, :bundle, 0, :eid, :vid, :lang, 0, :company, NULL)", array(
            ':company' => $record->company
          ) + $replacements);
        }
        if (!empty($record->country) || !empty($record->state) || !empty($record->city) || !empty($record->zip) || !empty($record->street) || !empty($record->street2)) {
          db_query("INSERT INTO {field_" . $tbl . "_field_listing_" . $ilk . $num . "_address} VALUES (:type, :bundle, 0, :eid, :vid, :lang, 0, :country, :state, NULL, :city, NULL, :zip, :street, :street2, NULL, NULL, NULL, NULL, NULL, NULL)", array(
            ':country' => $record->country,
            ':state' => $record->state,
            ':city' => $record->city,
            ':zip' => $record->zip,
            ':street' => $record->street,
            ':street2' => $record->street2
          ) + $replacements);
        }
        foreach ($record->phone_numbers as $delta => $phone_number) {
          if (!empty($phone_number->phone_number) || !empty($phone_number->phone_type)) {
            db_query("INSERT INTO {field_" . $tbl . "_field_listing_" . $ilk . $num . "_phone} VALUES (:type, :bundle, 0, :eid, :vid, :lang, :delta, :number, :phone_type)", array(
              ':delta' => $delta,
              ':number' => $phone_number->phone_number,
              ':phone_type' => $phone_number->phone_type,
            ) + $replacements);
          }
        }
        foreach ($record->email_addresses as $delta => $email_address) {
          if (!empty($email_address->email_address) || !empty($email_address->email_type)) {
            db_query("INSERT INTO {field_" . $tbl . "_field_listing_" . $ilk . $num . "_email} VALUES (:type, :bundle, 0, :eid, :vid, :lang, :delta, :email, :email_type)", array(
              ':delta' => $delta,
              ':email' => $email_address->email_address,
              ':email_type' => $email_address->email_type,
            ) + $replacements);
          }
        }

      }

    }

  }

}
