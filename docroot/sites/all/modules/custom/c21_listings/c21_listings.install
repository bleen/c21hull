<?php

/**
 * Implements hook_install().
 */
function c21_listings_install() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'listing_type')
                    ->execute();
  $nodes = empty($entities) ? array() : node_load_multiple(array_keys($entities['node']));

  if (empty($nodes)) {

    $listing_types = array(
      'Open',
      'Exclusive',
      'Exclusive Right',
    );

    foreach ($listing_types as $listing_type) {
      $values = array(
        'type' => 'listing_type',
        'uid' => 1,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($listing_type);

      $ewrapper->save(true);
      entity_save('node', $entity);
    }
  }

  c21_listings_update_7001();
}

/**
 * Implements hook_uninstall().
 */
function c21_listings_uninstall() {
  $fid = variable_get('c21_listings_default_featured_photo_fid', FALSE);
  if ($fid) {
    $file = file_load($fid);
    file_delete($file, TRUE);
    variable_del('c21_listings_default_featured_photo_fid');
  }
}

/**
 * Add a default image to be used by the "featured photo" if one is not set.
 */
function c21_listings_update_7001() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-photo.jpg',
    'file_name' => 'no-photo.jpg',
    'variable' => 'c21_listings_default_featured_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Set Roy & Ed as "owners".
 */
function c21_listings_update_7002() {
  $owners = array('Hull', 'Raarup');

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'agent')
    ->fieldCondition('field_agent_last_name', 'value', $owners);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $entity->field_agent_status[LANGUAGE_NONE][0]['value'] = 'owner';
      entity_save('node', $entity);
    }
  }
}

/**
 * Move terms from "additional building" vocab to "outside features".
 */
function c21_listings_update_7003(&$sandbox) {
  $source = 'listing_additional_building';
  $destination = 'listing_outside_features';
  $source_vocab = taxonomy_vocabulary_machine_name_load($source);
  $destination_vocab = taxonomy_vocabulary_machine_name_load($destination);

  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;

    // Migrate terms from the additional building vocabulary to the new outside
    // features vocabulary.
    $terms = taxonomy_get_tree($source_vocab->vid, 0, NULL, TRUE);
    foreach ($terms as $term) {
      $term->vid = $destination_vocab->vid;
      taxonomy_term_save($term);
    }
  }
  else {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing')
      ->range($sandbox['progress'], $sandbox['items_per_pass']);
    $result = $query->execute();

    if (!empty($result['node'])) {
      $entities = entity_load('node', array_keys($result['node']));
      foreach ($entities as $entity) {
        $needs_save = FALSE;

        // Check if there is value for additional building and move it to the
        // outside features field.
        if (isset($entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'])) {
          $tid = $entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'];
          $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $tid);
          $needs_save = TRUE;
        }

        // Check for a value of the "decks" field & "porch" field.
        $fields = array('decks', 'porch');
        foreach ($fields as $field) {
          if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
          ) {
            $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'] . ' ' . ($field == 'decks' ? 'deck' : 'porch');
            $values = explode(',', $values);
            foreach ($values as $value) {
              $value = strtolower(trim($value));
              $terms = taxonomy_get_term_by_name($value, $destination);
              if (empty($terms)) {
                $term = new stdClass();
                $term->vid = $destination_vocab->vid;
                $term->name = $value;
                taxonomy_term_save($term);
              }
              else {
                $term = array_pop($terms);
              }
              $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $term->tid);
            }
            $needs_save = TRUE;
          }
        }

        if ($needs_save) {
          entity_save('node', $entity);
        }

        $sandbox['progress']++;
      }
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Delete the additional bldg, porch, & decks fields.
 */
function c21_listings_update_7004() {
  field_delete_field('listing_additional_bldg');
  field_delete_field('listing_porch');
  field_delete_field('listing_decks');
}

/**
 * Make style, fireplace & siding taxonomies.
 */
function c21_listings_update_7005(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing')
    ->range($sandbox['progress'], $sandbox['items_per_pass']);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $needs_save = FALSE;

      // Check for a value of the "decks" field & "porch" field.
      $fields = array('style', 'fireplace', 'siding');
      foreach ($fields as $field) {
        $destination = 'listing_' . $field . '_info';
        $destination_vocab = taxonomy_vocabulary_machine_name_load('listing_' . $field);

        if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
        ) {
          $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'];
          $values = explode(',', $values);
          foreach ($values as $value) {
            $value = strtolower(trim($value));
            $terms = taxonomy_get_term_by_name($value, 'listing_' . $field);
            if (empty($terms)) {
              $term = new stdClass();
              $term->vid = $destination_vocab->vid;
              $term->name = $value;
              taxonomy_term_save($term);
            }
            else {
              $term = array_pop($terms);
            }
            $entity->{'field_' . $destination}[LANGUAGE_NONE][] = array('tid' => $term->tid);
          }
          $needs_save = TRUE;
        }
      }

      if ($needs_save) {
        entity_save('node', $entity);
      }

      $sandbox['progress']++;
    }
  }
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Add a default image to be used by the "agent photo" if one is not set.
 */
function c21_listings_update_7006() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-headshot.jpg',
    'file_name' => 'no-headshot.jpg',
    'variable' => 'c21_agents_default_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Enable imagefield focus.
 */
function c21_listings_update_7007() {
  module_enable(array('imagefield_focus'));
}
