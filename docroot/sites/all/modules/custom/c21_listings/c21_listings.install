<?php

/**
 * Implements hook_schema().
 */
function c21_listings_schema() {
  $schema['c21_listings_term_normalization'] = array(
    'description' => 'Term mapping to use during an MLS import',
    'fields' => array(
      'tid' => array(
        'description' => 'The tid of the term to map to',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'term_to_normalize' => array(
        'description' => 'A string which when encountered should be set to the corresponding tid',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function c21_listings_install() {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'listing_type')
                    ->execute();
  $nodes = empty($entities) ? array() : node_load_multiple(array_keys($entities['node']));

  if (empty($nodes)) {

    $listing_types = array(
      'Open',
      'Exclusive',
      'Exclusive Right',
    );

    foreach ($listing_types as $listing_type) {
      $values = array(
        'type' => 'listing_type',
        'uid' => 1,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($listing_type);

      $ewrapper->save(true);
      entity_save('node', $entity);
    }
  }

  c21_listings_update_7001();
}

/**
 * Implements hook_uninstall().
 */
function c21_listings_uninstall() {
  $fid = variable_get('c21_listings_default_featured_photo_fid', FALSE);
  if ($fid) {
    $file = file_load($fid);
    file_delete($file, TRUE);
    variable_del('c21_listings_default_featured_photo_fid');
  }
}

/**
 * Add a default image to be used by the "featured photo" if one is not set.
 */
function c21_listings_update_7001() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-photo.jpg',
    'file_name' => 'no-photo.jpg',
    'variable' => 'c21_listings_default_featured_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Set Roy & Ed as "owners".
 */
function c21_listings_update_7002() {
  $owners = array('Hull', 'Raarup');

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'agent')
    ->fieldCondition('field_agent_last_name', 'value', $owners);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $entity->field_agent_status[LANGUAGE_NONE][0]['value'] = 'owner';
      entity_save('node', $entity);
    }
  }
}

/**
 * Move terms from "additional building" vocab to "outside features".
 */
function c21_listings_update_7003(&$sandbox) {
  $source = 'listing_additional_building';
  $destination = 'listing_outside_features';
  $source_vocab = taxonomy_vocabulary_machine_name_load($source);
  $destination_vocab = taxonomy_vocabulary_machine_name_load($destination);

  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;

    // Migrate terms from the additional building vocabulary to the new outside
    // features vocabulary.
    $terms = taxonomy_get_tree($source_vocab->vid, 0, NULL, TRUE);
    foreach ($terms as $term) {
      $term->vid = $destination_vocab->vid;
      taxonomy_term_save($term);
    }
  }
  else {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing')
      ->range($sandbox['progress'], $sandbox['items_per_pass']);
    $result = $query->execute();

    if (!empty($result['node'])) {
      $entities = entity_load('node', array_keys($result['node']));
      foreach ($entities as $entity) {
        $needs_save = FALSE;

        // Check if there is value for additional building and move it to the
        // outside features field.
        if (isset($entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'])) {
          $tid = $entity->field_listing_additional_bldg[LANGUAGE_NONE][0]['tid'];
          $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $tid);
          $needs_save = TRUE;
        }

        // Check for a value of the "decks" field & "porch" field.
        $fields = array('decks', 'porch');
        foreach ($fields as $field) {
          if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
            && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
          ) {
            $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'] . ' ' . ($field == 'decks' ? 'deck' : 'porch');
            $values = explode(',', $values);
            foreach ($values as $value) {
              $value = strtolower(trim($value));
              $terms = taxonomy_get_term_by_name($value, $destination);
              if (empty($terms)) {
                $term = new stdClass();
                $term->vid = $destination_vocab->vid;
                $term->name = $value;
                taxonomy_term_save($term);
              }
              else {
                $term = array_pop($terms);
              }
              $entity->field_listing_outside_features[LANGUAGE_NONE][] = array('tid' => $term->tid);
            }
            $needs_save = TRUE;
          }
        }

        if ($needs_save) {
          entity_save('node', $entity);
        }

        $sandbox['progress']++;
      }
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Delete the additional bldg, porch, & decks fields.
 */
function c21_listings_update_7004() {
  field_delete_field('listing_additional_bldg');
  field_delete_field('listing_porch');
  field_delete_field('listing_decks');
}

/**
 * Make style, fireplace & siding taxonomies.
 */
function c21_listings_update_7005(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing')
    ->range($sandbox['progress'], $sandbox['items_per_pass']);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      $needs_save = FALSE;

      // Check for a value of the "decks" field & "porch" field.
      $fields = array('style', 'fireplace', 'siding');
      foreach ($fields as $field) {
        $destination = 'listing_' . $field . '_info';
        $destination_vocab = taxonomy_vocabulary_machine_name_load('listing_' . $field);

        if (isset($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'])
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'none'
          && strtolower($entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value']) != 'no'
        ) {
          $values = $entity->{'field_listing_' . $field}[LANGUAGE_NONE][0]['value'];
          $values = explode(',', $values);
          foreach ($values as $value) {
            $value = strtolower(trim($value));
            $terms = taxonomy_get_term_by_name($value, 'listing_' . $field);
            if (empty($terms)) {
              $term = new stdClass();
              $term->vid = $destination_vocab->vid;
              $term->name = $value;
              taxonomy_term_save($term);
            }
            else {
              $term = array_pop($terms);
            }
            $entity->{'field_' . $destination}[LANGUAGE_NONE][] = array('tid' => $term->tid);
          }
          $needs_save = TRUE;
        }
      }

      if ($needs_save) {
        entity_save('node', $entity);
      }

      $sandbox['progress']++;
    }
  }
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}

/**
 * Add a default image to be used by the "agent photo" if one is not set.
 */
function c21_listings_update_7006() {
  $default_image = array(
    'scheme' => 'public://',
    'dest_directory' => 'default_images',
    'source_path' => drupal_get_path('theme', 'escrow') . '/images/' . 'no-headshot.jpg',
    'file_name' => 'no-headshot.jpg',
    'variable' => 'c21_agents_default_photo_fid',
  );

  c21_image_create($default_image);
}

/**
 * Enable imagefield focus.
 */
function c21_listings_update_7007() {
  module_enable(array('imagefield_focus'));
}

/**
 * Disable imagefield focus and enable focal point.
 */
function c21_listings_update_7008() {
  module_disable(array('imagefield_focus'));
  module_enable(array('focal_point'));
}

/**
 * Make sure that all listings have a featured photo if there is a photo
 * available.
 */
function c21_listings_update_7009() {
  $q = db_select('node', 'n');
  $q->fields('n', array())
    ->condition('n.type', 'listing', '=')
    ->addJoin('LEFT', 'field_data_field_listing_featured_photo', 'flfp', 'flfp.entity_id = n.nid');
  $q->isNull('flfp.field_listing_featured_photo_fid');
  $result = $q->execute()->fetchAllAssoc('nid');

  foreach ($result as $nid => $node) {
    $node = node_load($nid);
    if (!empty($node->field_listing_photos[LANGUAGE_NONE])) {
      $node->field_listing_featured_photo = array(
        LANGUAGE_NONE => array($node->field_listing_photos[LANGUAGE_NONE][0]),
      );
      unset($node->field_listing_photos[LANGUAGE_NONE][0]);

      node_save($node);
    }
  }
}

/**
 * Fix the spelling of Delaware in the notes field.
 */
function c21_listings_update_7010() {
  $tables = array('field_data_field_listing_notes', 'field_revision_field_listing_notes');

  foreach ($tables as $table) {
    $q = db_select($table, 'fn');
    $q->fields('fn', array('entity_id', 'revision_id', 'field_listing_notes_value'))
      ->condition('fn.field_listing_notes_value', '%Deleware%', 'LIKE');
    $result = $q->execute()->fetchAllAssoc('entity_id');

    foreach ($result as $entity_id => $data) {
      db_update($table)
        ->fields(array(
          'field_listing_notes_value' => str_replace('Deleware', 'Delaware', $data->field_listing_notes_value),
        ))
        ->condition('entity_id', $entity_id)
        ->condition('revision_id', $data->revision_id)
        ->execute();
    }
  }
}

/**
 * Fix missing fireplace, siding and style data.
 */
function c21_listings_update_7011() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, l.style, lbd.fireplace, lbd.siding FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    // Parse out the nid
    $nid_parts = explode('-', $legacy_record->listing_id);
    if (is_array($nid_parts) && count($nid_parts) == 2) {
      $nid = array_pop($nid_parts);
      if (!is_numeric($nid)) {
        continue;
      }
    }

    // Grab the revision id from the listing node in question.
    $vid = db_select('node', 'n')
      ->fields('n', array('vid'))
      ->condition('n.nid', $nid, '=')
      ->execute()
      ->fetchField();
    if (!is_numeric($vid)) {
      continue;
    }

    // Update the field and field revision tables with the needed data.
    $columns = array('fireplace', 'siding', 'style');
    foreach ($columns as $column) {
      // If the column in question has no legacy data, skip to the next column.
      if (empty($legacy_record->{$column})) {
        continue;
      }

      // Grab the necessary taxonomy information.
      $legacy_value = strtolower($legacy_record->{$column});
      $tid = db_select('migrate_map_c21termslisting' . $column, 'm')
        ->fields('m', array('destid1'))
        ->condition('m.sourceid1', $legacy_value, '=')
        ->execute()
        ->fetchField();
      if (empty($tid)) {
        continue;
      }

      try {
        db_query('INSERT INTO field_data_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
        db_query('INSERT INTO field_revision_field_listing_' . $column . '_info (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_' . $column . '_info_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
      }
      catch (Exception $e) {}
    }
  }
}

/**
 * Fix missing outside feature data.
 */
function c21_listings_update_7012() {
  // Connect to legacy db.
  db_set_active('legacy');

  // Grab all data from all listings in the legacy db.
  $result = db_query('SELECT l.listing_id, lbd.add_building FROM listings AS l JOIN listing_building_dtl AS lbd ON lbd.listing_id = l.listing_id');
  $legacy_data = $result->fetchAll();

  // Change db connection back to default.
  db_set_active('default');

  foreach ($legacy_data as $legacy_record) {
    // Parse out the nid
    $nid_parts = explode('-', $legacy_record->listing_id);
    if (is_array($nid_parts) && count($nid_parts) == 2) {
      $nid = array_pop($nid_parts);
      if (!is_numeric($nid)) {
        continue;
      }
    }

    // Grab the revision id from the listing node in question.
    $vid = db_select('node', 'n')
      ->fields('n', array('vid'))
      ->condition('n.nid', $nid, '=')
      ->execute()
      ->fetchField();
    if (!is_numeric($vid)) {
      continue;
    }

    // If the column in question has no legacy data, skip to the next column.
    if (empty($legacy_record->add_building)) {
      continue;
    }

    // Grab the necessary taxonomy information.
    $legacy_value = strtolower($legacy_record->add_building);
    $tid = db_select('migrate_map_c21termslistingoutsidefeatures', 'm')
      ->fields('m', array('destid1'))
      ->condition('m.sourceid1', $legacy_value, '=')
      ->execute()
      ->fetchField();
    if (empty($tid)) {
      continue;
    }

    try {
      db_query('INSERT INTO field_data_field_listing_outside_features (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_outside_features_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
      db_query('INSERT INTO field_revision_field_listing_outside_features (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_listing_outside_features_tid) VALUES (\'node\', \'listing\', 0, ' . $nid . ', ' . $vid . ', \'und\', 0, ' . $tid .')');
    }
    catch (Exception $e) {}
  }
}

/**
 * Add a table to the database for term normalization.
 */
function c21_listings_update_7013() {
  //Check if table exists, if not install the schema.
  if(db_table_exists('c21_listings_term_normalization') == FALSE) {
    drupal_install_schema('c21_listings');
  }
}

/**
 * Fix missing "year built" data.
 */
function c21_listings_update_7014(&$sandbox) {
  if (!array_key_exists('progress', $sandbox)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing');
    $result = $query->execute();

    $sandbox['items_per_pass'] = 25;
    $sandbox['max'] = !empty($result['node']) ? count($result['node']) : 0;
    $sandbox['progress'] = 0;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'listing')
    ->range($sandbox['progress'], $sandbox['items_per_pass']);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $entities = entity_load('node', array_keys($result['node']));
    foreach ($entities as $entity) {
      // Check how many revisions there are for this node.
      $query = db_select('node_revision', 'nr')
        ->fields('nid', array('nid'))
        ->condition('nid', $entity->nid);
      $revision_count = $query->countQuery()->execute()->fetchField();

      // If there is legacy data, grab the "year built".
      if ($revision_count > 1 && !empty($entity->field_listing_legacy_data[LANGUAGE_NONE][0]['value'])) {
        $legacy_data = drupal_json_decode($entity->field_listing_legacy_data[LANGUAGE_NONE][0]['value']);
        $year_built = is_integer($legacy_data['year_built']) ? $legacy_data['year_built'] . '-01-01 00:00:00' : NULL;
        $entity->field_listing_year_built[LANGUAGE_NONE][0] = array('value' => $year_built);
        entity_save('node', $entity);
      }

      $sandbox['progress']++;
    }
  }
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']);
}
