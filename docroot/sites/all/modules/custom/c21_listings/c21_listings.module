<?php
/**
 * @file
 * Code for the C21 Listings feature.
 */

include_once 'c21_listings.features.inc';

function c21_listings_menu() {
  $items['ajax/agents'] = array(
    'title' => 'List Agents',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
    'page callback' => 'c21_listing_get_agents',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function c21_listings_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'c21_listings_render_rooms_group' => array(
      'render element' => 'form',
      'file' => 'theme/c21_listings_forms.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_agent_node_form_alter(&$form, $fom_state) {
  $form['title']['#placeholder'] = t('Roy B. Hull, Owner');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_listing_node_form_alter(&$form, &$form_state) {
  // Add custom CSS and JS files for this form.
  $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_forms.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'c21_listings') . '/js/c21_listings_forms.js';

  // MLS # should only be displayed for "exclusive" listings.
  $form['field_listing_mls']['#states'] = array(
    'visible' => array(
      //':select[name="field_listing_type[und]"]' => array(
      '#edit-field-listing-type-und' => array(
        array('value' => 'exclusive'),
        array('value' => 'exclusive_right'),
      ),
    ),
  );

  // Remove the fieldset from "List Date" and "Year Built".
  $form['field_listing_list_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');
  $form['field_listing_year_built'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');

  // Rename the publishing options field.
  $form['options']['#title'] = t('Listing options');
  $form['options']['status']['#title'] = t('Active listing');
  $form['options']['promote']['#title'] = t('Featured listing');
  $form['options']['sticky']['#access'] = FALSE;

  $form['field_listing_bathrooms'][LANGUAGE_NONE][0]['value']['#step'] = .5;
  $form['field_listing_acreage'][LANGUAGE_NONE][0]['value']['#step'] = .001;
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function c21_listings_field_group_build_pre_render_alter(&$element) {
  $element['group_listing_details']['group_listing_measurements']['group_listing_rooms']['#theme'][] = 'c21_listings_render_rooms_group';
}

/**
 * Implements hook_date_combo_process_alter().
 */
function c21_listings_date_combo_process_alter(&$element, $form_state, $context) {
  $element['show_todate']['#access'] = FALSE;
  unset($element['value']['#description']);
  unset($element['value']['#attributes']);
  unset($element['value2']['#description']);
  unset($element['value2']['#title']);
  unset($element['value2']['#attributes']);

  $element['value']['#wrapper_attributes']['class'] = array('start-date-wrapper');
  $element['value2']['#wrapper_attributes']['class'] = array('end-date-wrapper');
}

/**
 * Implements hook_date_popup_process_alter().
 */
function c21_listings_date_popup_process_alter(&$element, $form_state, $context) {
  if ($context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
    if ($element['#date_title'] == 'List Date End date' && $context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
      $element['#prefix'] = '<span class="fromto">to</span>';
    }
    $element['date']['#description'] = '';
  }

}

/**
 * Returns a list of agents with basic meta data.
 * @return array
 *   An array agents, keyed by nid, including 'full_name', 'last_name',
 *   'current_office', and 'status'.
 */
function c21_listing_get_agents() {
  $agents = array();

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'agent')
    ->condition('status', 1)
    ->orderBy('title')
    ->execute();
  while ($record = $result->fetchAssoc()) {
    $agent = node_load($record['nid']);

    $agents[$record['nid']] = array(
      'full_name' => $agent->title,
      'last_name' => $agent->name,
      'current_office' => $agent->field_agent_primary_office[LANGUAGE_NONE][0]['value'],
      'status' => $agent->field_agent_status[LANGUAGE_NONE][0]['value'],
    );
  }

  print drupal_json_output($agents);
  exit();
}






