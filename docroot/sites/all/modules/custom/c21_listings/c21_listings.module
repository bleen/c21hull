<?php
/**
 * @file
 * Code for the C21 Listings feature.
 */

include_once 'c21_listings.features.inc';

/**
 * Implements hook_menu().
 */
function c21_listings_menu() {
  $items['ajax/agents'] = array(
    'title' => 'List Agents',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
    'page callback' => 'c21_listings_get_agents',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function c21_listings_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'c21_listings_render_rooms_group' => array(
      'render element' => 'form',
      'file' => 'theme/c21_listings_forms.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_node_view().
 */
function c21_listings_node_view($node, $view_mode) {
  if ($node->type == 'listing') {
    // Add a map link.
    $map_link = _c21_listings_get_gmap_link($node);
    if (!empty($map_link)) {
      $link_content = array(
        '#theme' => 'links',
        '#links' => array('c21_map_link' => $map_link),
        '#attributes' => array('class' => array('links', 'inline')),
      );
      $node->content['links']['c21_map_link'] = $link_content;
    }

    // Add the virtual tour link.
    if (!empty($node->field_listing_virtual_tour)) {
      // drupal_add_css(drupal_get_path('module', 'print') . '/css/printlinks.css'); @todo: add css for virtual tours
      $links['c21_virtual_tour_link'] = $node->field_listing_virtual_tour[LANGUAGE_NONE][0];
      $links['c21_virtual_tour_link']['title'] = t('Virtual Tour');
      $links['c21_virtual_tour_link']['href'] = $links['c21_virtual_tour_link']['url'];

      $link_content = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );

      $node->content['links']['c21_virtual_tour_link'] = $link_content;
    }

    if ($view_mode == 'full') {
      // Add js for the featured photo.
      // Using #attached causes borealis to stop working ?!?
      drupal_add_js(drupal_get_path('module','c21_listings') . '/js/c21_listings.js', array('scope' => 'footer'));
    }

  }
}

/**
 * Implements hook_node_view_alter().
 */
function c21_listings_node_view_alter(&$build, $type) {
  // Use a different view mode for the printpdf pages if the current user
  // has permissions to access admin.
  if (user_access('access administration pages') && arg(0) == 'printpdf') {
    $node = $build['#node'];
    $view_mode = 'print_internal';
    $langcode = $build['#language'];
    $format = $build['#print_format'];

    node_build_content($node, $view_mode);

    // Disable the links area
    unset($node->content['links']);
    // Disable fivestar widget output
    unset($node->content['fivestar_widget']);
    // Disable service links module output
    unset($node->content['service_links']);

    $build = $node->content;
    unset($node->content);

    $build += array(
      '#theme' => 'node',
      '#node' => $node,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
      '#print_format' => $format,
    );
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function c21_listings_contextual_links_view_alter(&$element, &$items) {
  // This hook is called for EVERY set of contextual links
  // on a page.  We first want to check the $element to make
  // sure we are adding a link to the correct list of contextual
  // links. In this case we only want to add a link to blocks
  // created by the "search" module. We just add links using the
  // same array structure as is used by theme_links.
  if (isset($element['#element']['#bundle']) && $element['#element']['#bundle'] == 'listing') {
    $element['#links']['print'] = array(
      'title' => 'Print (sharing)',
      'href' => url('print/node/' . $element['#element']['#node']->nid, array('absolute' => TRUE)),
    );
    $element['#links']['printpdf'] = array(
      'title' => 'Print (office use)',
      'href' => url('printpdf/node/' . $element['#element']['#node']->nid, array('absolute' => TRUE)),
    );
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function c21_listings_field_formatter_info() {
  $info = array(
    'listing_id' => array(
      'label' => t('Listing Id'),
      'field types' => array('text'),
      'description' => t('Displays text as a Listing Id by appending "-[nid]".'),
    ),
    'us_phone_number' => array(
      'label' => t('Telephone Number (US)'),
      'field types' => array('text'),
      'description' => t('Displays text as a tel: link'),
    ),
    'email' => array(
      'label' => t('Email'),
      'field types' => array('text'),
      'description' => t('Displays text as a mailto: link'),
    )
  );

  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function c21_listings_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'listing_id':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = strtoupper($item['safe_value']) . '-' . $entity->nid;
      }
      break;
    case 'us_phone_number':
      foreach ($items as $delta => $item) {
        $element[$delta]['#theme'] = 'link';
        $element[$delta]['#text'] = $item['safe_value'];
        $element[$delta]['#path'] = _c21_format_phone_number_link($item['safe_value']);
        $element[$delta]['#options'] = array(
          'attributes' => array('class' => array('phone-number us-phone-number')),
          'html' => FALSE,
        );
      }
      break;
    case 'email':
      foreach ($items as $delta => $item) {
        $element[$delta]['#theme'] = 'link';
        $element[$delta]['#text'] = $item['safe_value'];
        $element[$delta]['#path'] = 'mailto:' . $item['safe_value'];
        $element[$delta]['#options'] = array(
          'attributes' => array('class' => array('email')),
          'html' => FALSE,
        );
      }
      break;
  }
  return $element;
}

//function c21_listings_ds_pre_render_alter(&$layout_render_array, $context) {
//  $foo = 'bar';
//}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_agent_node_form_alter(&$form, $fom_state) {
  // Set a placeholder for the name field.
  $form['title']['#placeholder'] = t('Roy B. Hull, Owner');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_listing_node_form_alter(&$form, &$form_state) {
  // Add custom CSS and JS files for this form.
  $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_forms.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'c21_listings') . '/js/c21_listings_forms.js';

  // Add the listing id number as a suffix to the listing id prefix field.
  $form['field_listing_id_prefix'][LANGUAGE_NONE][0]['value']['#field_suffix'] = ' &ndash; ' . (isset($form['#node']->nid) ? $form['#node']->nid : '#####');

  // MLS # should only be displayed for "exclusive" listings.
  $form['field_listing_mls']['#states'] = array(
    'visible' => array(
      '#edit-field-listing-type-und' => array(
        array('value' => 'exclusive'),
        array('value' => 'exclusive_right'),
      ),
    ),
  );

  // Add some classes to the agent fields.
  $form['field_listing_agent']['#attributes']['class'][] = 'field-agents';
  $form['field_listing_sale_agent']['#attributes']['class'][] = 'field-agents';

  // Remove the fieldset from date fields.
  $form['field_listing_list_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');
  $form['field_listing_year_built'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');
  $form['field_listing_closing_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');

  // Rename the publishing options field.
  $form['options']['#title'] = t('Listing options');
  $form['options']['status']['#title'] = t('Active listing');
  $form['options']['promote']['#title'] = t('Featured listing');
  $form['options']['sticky']['#access'] = FALSE;

  $form['field_listing_bathrooms'][LANGUAGE_NONE][0]['value']['#step'] = .5;
  $form['field_listing_acreage'][LANGUAGE_NONE][0]['value']['#step'] = .001;

  // Hide the "legacy data" field if its empty and for non-admins.
  $form['field_listing_legacy_data']['#disabled'] = TRUE;
  if (!user_access('administer site configuration') || empty($form['field_listing_legacy_data'][LANGUAGE_NONE][0]['value']['#default_value'])) {
    $form['field_listing_legacy_data']['#access'] = FALSE;
  }

}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function c21_listings_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#node_edit_form']) && $element['#node_edit_form']) {
    $element['group_listing_details']['group_listing_measurements']['group_listing_rooms']['#theme'][] = 'c21_listings_render_rooms_group';
  }
}

/**
 * Implements hook_date_combo_process_alter().
 */
function c21_listings_date_combo_process_alter(&$element, $form_state, $context) {
  $element['show_todate']['#access'] = FALSE;
  unset($element['value']['#description']);
  unset($element['value']['#attributes']);
  unset($element['value2']['#description']);
  unset($element['value2']['#title']);
  unset($element['value2']['#attributes']);

  $element['value']['#wrapper_attributes']['class'] = array('start-date-wrapper');
  $element['value2']['#wrapper_attributes']['class'] = array('end-date-wrapper');
}

/**
 * Implements hook_date_popup_process_alter().
 */
function c21_listings_date_popup_process_alter(&$element, $form_state, $context) {
  if (isset($element['#field']) && $context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
    if ($element['#date_title'] == 'List Date End date' && $context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
      $element['#prefix'] = '<span class="fromto">to</span>';
    }
    $element['date']['#description'] = '';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_views_exposed_form_alter(&$form, &$form_state) {
  switch ($form['#id']) {
    case 'views-exposed-form-c21-reports-listing-report':
      $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_forms.css';
      $form['field_listing_list_date_value2']['min']['#title'] = '';
      $form['field_listing_list_date_value2']['min']['#attributes']['placeholder'] = t('From');
      $form['field_listing_list_date_value2']['max']['#title'] = '';
      $form['field_listing_list_date_value2']['max']['#attributes']['placeholder'] = t('To');
      break;
  }
}

/**
 * Return a themed list of links to various reports.
 */
function c21_listings_reports_links() {
  $report_links = array(
    'expiring-listings-all' => array(
      'title' => t('Expiring Listings (All)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=All&field_listing_status_value=All&items_per_page=100&order=field_listing_list_date_1&sort=desc',
    ),
    'expiring-listings-land' => array(
      'title' => t('Expiring Listings (Land)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=land&field_listing_status_value=All&items_per_page=100&order=field_listing_list_date_1&sort=desc',
    ),
    'expiring-listings-residence' => array(
      'title' => t('Expiring Listings (Residences)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=residence&field_listing_status_value=All&items_per_page=100&order=field_listing_list_date_1&sort=desc',
    ),
    'mls-listings' => array(
      'title' => t('MLS Listings'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min]&field_listing_list_date_value2[max]&field_listing_agent_target_id=All&field_listing_building_type_value=All&field_listing_status_value=All&items_per_page=100&order=field_listing_mls&sort=asc',
    ),
    'listings-by-price-all' => array(
      'title' => t('Listings by Price (All)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=All&field_listing_status_value=All&items_per_page=100&order=field_listing_list_price&sort=desc',
    ),
    'listings-by-price-land' => array(
      'title' => t('Listings by Price (Land)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=land&field_listing_status_value=All&items_per_page=100&order=field_listing_list_price&sort=desc',
    ),
    'listings-by-price-residence' => array(
      'title' => t('Listings by Price (Residences)'),
      'href' => '/admin/reports/c21/listings?field_listing_list_date_value2[min][date]=&field_listing_list_date_value2[max][date]=&field_listing_agent_target_id=All&field_listing_building_type_value=residence&field_listing_status_value=All&items_per_page=100&order=field_listing_list_price&sort=desc',
    ),
  );

  $output = theme('links', array(
    'links' => $report_links,
    'attributes' => array(
      'class' => 'c21_listings_report_list'
    ),
  ));
  return $output;
}

/**
 * Returns a list of agents with basic meta data.
 *
 * @return array
 *   An array agents, keyed by nid, including 'full_name', 'last_name',
 *   'current_office', and 'status'.
 */
function c21_listings_get_agents() {
  $agents = array();

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'agent')
    ->condition('status', 1)
    ->orderBy('title')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    $agent = node_load($record['nid']);

    $agents[$record['nid']] = array(
      'full_name' => $agent->title,
      'last_name' => $agent->name,
      'current_office' => $agent->field_agent_primary_office[LANGUAGE_NONE][0]['value'],
      'status' => $agent->field_agent_status[LANGUAGE_NONE][0]['value'],
    );
  }

  print drupal_json_output($agents);
  exit();
}

/**
 * Return an array of the "floors" for which listing data is collected.
 *
 * @return array
 */
function c21_listings_get_floors() {
  $floors = array(
    'f1' => t('Floor 1'),
    'f2' => t('Floor 2'),
    'b' => t('Basement'),
  );

  return $floors;
}

/**
 * Return an array of the "rooms" for which listing data is collected.
 *
 * @return array
 */
function c21_listings_get_rooms() {
  $rooms = array(
    'living_room' => t('Living Room'),
    'dining_room' => t('Dining Room'),
    'kitchen' => t('Kitchen'),
    'liv_din' => t('Living/Dining Room'),
    'din_kitchen' => t('Dining/Kitchen'),
    'bathroom1' => t('Bathroom 1'),
    'bathroom2' => t('Bathroom 2'),
    'bathroom3' => t('Bathroom 3'),
    'bedroom1' => t('Bedroom 1'),
    'bedroom2' => t('Bedroom 2'),
    'bedroom3' => t('Bedroom 3'),
    'bedroom4' => t('Bedroom 4'),
    'bedroom5' => t('Bedroom 5'),
    'family_room' => t('Family Room'),
    'other1' => t('Other 1'),
    'other2' => t('Other 2'),
    'other3' => t('Other 3'),
  );

  return $rooms;
}

/**
 * Theme function for the listing_id field formatter.
 */
function theme_c21_listings_listing_id($variables) {
  return strtoupper($variables['prefix']) . '-' . $variables['nid'];
}

/**
 * Format a phone number to be appropraite for use in the href of a tel: link.
 *
 * @param  string $phone_number
 *   A human readible phone number.
 *
 * @return string
 *   The formatted phone number beginning with "tel:". The strings "ext" and "x"
 *   will be replaced with a "+".
 */
function _c21_format_phone_number_link($phone_number) {
  $formatted_phone_number = preg_replace("/x|ext|ext./i", '+', $phone_number);
  $formatted_phone_number = preg_replace("/[^0-9,+]/i", '', $formatted_phone_number);

  return 'tel:' . $formatted_phone_number;
}

/**
 * Given a listing node, build a link to google maps.
 *
 * @param object $node
 *
 * @return array
 */
function _c21_listings_get_gmap_link($node) {
  $gmap_link = array();

  if (!empty($node->field_listing_lot) && !empty($node->field_listing_street) && !empty($node->field_listing_township)) {
    $lot = $node->field_listing_lot[LANGUAGE_NONE][0]['safe_value'];
    $street = $node->field_listing_street[LANGUAGE_NONE][0]['safe_value'];
    $town = $node->field_listing_township[LANGUAGE_NONE][0]['taxonomy_term']->name;
    $state = isset($node->field_listing_state) ? $node->field_listing_state[LANGUAGE_NONE][0]['safe_value'] : 'PA';

    $gmap_link = array(
      'title' => t('See map'),
      'href' => 'http://maps.google.com/maps',
      'query' => array(
        'q' => $lot . ' ' . $street . ', ' . $town . ', ' . $state, // Search query.
        'hl' => 'en', // Language.
        'iwloc' => 'A', // Information Bubble [A|''].
        'z' => 12, // Zoom.
        't' => 'm', // Map type.
      ),
      'attributes' => array(
        'target' => '_blank',
      ),
    );
  }

  return $gmap_link;
}
