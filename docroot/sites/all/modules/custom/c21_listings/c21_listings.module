<?php
/**
 * @file
 * Code for the C21 Listings feature.
 */

include_once 'c21_listings.features.inc';

define('LISTING_TYPE_OPEN_NID', 1);
define('LISTING_TYPE_EXCLUSIVE_NID', 2);
define('LISTING_TYPE_EXCLUSIVE_RIGHT_NID', 3);

define('LISTING_LAND_TID', 1033);

/**
 * Implements hook_menu().
 */
function c21_listings_menu() {
  $items['ajax/agents'] = array(
    'title' => 'List Agents',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages'),
    'page callback' => 'c21_listings_get_agents',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function c21_listings_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'c21_workbench_links' => array(
      'render element' => 'links',
      'file' => 'theme/c21_listings_theme.inc'
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_node_presave().
 */
function c21_listings_node_presave($node) {
  if ($node->type == 'listing') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $listing_status = $wrapper->field_listing_status->value();
    if (in_array($listing_status, array('sold', 'withdrawn', 'inactive'))) {
      $node->status = FALSE;
      drupal_set_message(t('Listing "!title" was set to "%listing_status" so it has been marked as "inactive" and will no longer be visible to the public.', array('!title' => $node->title, '%listing_status' => $listing_status)), 'warning');
    }
  }
}

/**
 * Implements hook_node_view().
 */
function c21_listings_node_view($node, $view_mode) {
  if ($node->type == 'listing') {
    // Add the virtual tour link.
    if (!empty($node->field_listing_virtual_tour)) {
      // drupal_add_css(drupal_get_path('module', 'print') . '/css/printlinks.css'); @todo: add css for virtual tours
      $links['c21_virtual_tour_link'] = $node->field_listing_virtual_tour[LANGUAGE_NONE][0];
      $links['c21_virtual_tour_link']['title'] = t('Virtual Tour');
      $links['c21_virtual_tour_link']['href'] = $links['c21_virtual_tour_link']['url'];

      $link_content = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );

      $node->content['links']['c21_virtual_tour_link'] = $link_content;
    }

    if ($view_mode == 'full') {
      // Add js for the featured photo.
      // Using #attached causes borealis to stop working ?!?
      drupal_add_js(drupal_get_path('module','c21_listings') . '/js/c21_listings.js', array('scope' => 'footer'));
    }

  }
}

/**
 * Implements hook_node_view_alter().
 */
function c21_listings_node_view_alter(&$build, $type) {
  // Use a different view mode for the printpdf pages if the current user
  // has permissions to access admin.
//  if (user_access('access administration pages') && (arg(0) == 'printpdf' || (arg(0) == 'print' && isset($_GET['debug'])))) {
  if (user_access('access administration pages') && (arg(0) == 'print' || (arg(0) == 'printpdf'))) {
    $node = $build['#node'];
    $view_mode = 'print_internal';
    $langcode = $build['#language'];
    $format = $build['#print_format'];

    // Note: if you are here because the display order for printing is wrong,
    //   for some reason the "node_build_content" below does not fix the field
    //   weight if the view mode was not originally intended to be
    //   "print_internal". Not sure how to fix this so manually set the field
    //   weights to fit your needs noting that changing the weights in the
    //   original view mode will effect this display.
    node_build_content($node, $view_mode);

    foreach (element_children($build) as $field_name) {
      if (empty($node->content[$field_name][0])) {
        $node->content[$field_name] = $build[$field_name];
      }
    }

    // Disable the links area
    unset($node->content['links']);
    // Disable fivestar widget output
    unset($node->content['fivestar_widget']);
    // Disable service links module output
    unset($node->content['service_links']);

    $build = $node->content;
    unset($node->content);

    $build += array(
      '#theme' => 'node',
      '#node' => $node,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
      '#print_format' => $format,
    );
  }
}

/**
 * Implements hook_element_info_alter().
 */
function c21_listings_element_info_alter(&$type) {
  $type['textfield']['#process'][] = 'c21_listings_element_process';
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * The majority of this code was taken from
 * empty_fields_field_attach_view_alter(). It's reworked here because we needed
 * empty values to be rendered as well.
 *
 */
function c21_listings_field_attach_view_alter(&$output, $context) {
  // Use a different view mode for the printpdf pages if the current user
  // has permissions to access admin.
  if (user_access('access administration pages') && arg(0) == 'printpdf') {
    $entity_type = $context['entity_type'];
    $entity = $context['entity'];
    $view_mode = 'print_internal';

    if (module_exists('empty_fields')) {
      // This is called per field without field context, so this flag prevents
      // excessive processing on the entity.
      if (empty($context['display']) || !empty($context['entity']->empty_fields_processed)) {
        return;
      }
      $context['entity']->empty_fields_processed = TRUE;

      list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
      $rendered_elements = element_children($output);

      foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
        // Do not add field that is hidden in current display.
        $display = field_get_display($instance, $view_mode, $entity);
        if ($display['type'] == 'hidden') {
          continue;
        }

        // Some field types still render, so double check that these have
        // content. To date, this is limited to the text fields that always save
        // even if empty.
        $field = field_info_field($field_name);

        // Provide additional context for the handlers.
        $context['field_name'] = $field_name;
        $context['field'] = $field;
        $context['instance'] = $instance;

        // But firstly, check if the user can access the field.
        if (!field_access('view', $field, $entity_type, $entity)) {
          continue;
        }

        if (in_array($field_name, $rendered_elements)) {
          switch ($field['type']) {
            case 'text':
            case 'text_long':
            case 'text_with_summary':
            case 'text_summary_or_trimmed':
              foreach (element_children($output[$field_name]) as $delta) {
                if (!isset($output[$field_name][$delta]['#markup']) || !empty($output[$field_name][$delta]['#markup']) || drupal_strlen($output[$field_name][$delta]['#markup'])) {
                  continue 3;
                }
              }
              break;

            default:
              continue 2;

          }
        }

        // Load the configured plugin.
        $plugin = empty_fields_load_plugin($instance, $display['settings']);
        if ($plugin) {
          $markup = $plugin->react($context);
          $markup = empty($markup) ? '' : $markup;
          $language = empty($context['language']) ? field_language($entity_type, $entity, $field_name) : $language = $context['language'];
          $output[$field_name] = array(
            '#theme' => 'field',
            '#title' => $instance['label'],
            '#label_display' => $display['label'],
            '#weight' => $display['weight'],
            '#field_type' => $field['type'],
            '#field_name' => $field_name,
            '#bundle' => $bundle,
            '#object' => $entity,
            '#entity_type' => $entity_type,
            '#view_mode' => $view_mode,
            '#language' => $language,
            '#formatter' => $display['type'],
            '#items' => array(
              0 => array('value' => $markup),
            ),
            0 => array(
              '#markup' => $markup,
            ),
          );

          // Allow plugins to alter output.
          $plugin->alterOutput($output[$field_name], $context);
        }
      }
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function c21_listings_contextual_links_view_alter(&$element, &$items) {
  // This hook is called for EVERY set of contextual links
  // on a page.  We first want to check the $element to make
  // sure we are adding a link to the correct list of contextual
  // links. In this case we only want to add a link to blocks
  // created by the "search" module. We just add links using the
  // same array structure as is used by theme_links.
  if (isset($element['#element']['#bundle']) && $element['#element']['#bundle'] == 'listing') {
    $element['#links']['print'] = array(
      'title' => 'Print (sharing)',
      'href' => url('print/node/' . $element['#element']['#node']->nid, array('absolute' => TRUE)),
    );
    $element['#links']['printpdf'] = array(
      'title' => 'Print (office use)',
      'href' => url('printpdf/node/' . $element['#element']['#node']->nid, array('absolute' => TRUE)),
    );
  }
}

/**
 * Implements hook_cron().
 */
function c21_listings_cron() {
  $queue = DrupalQueue::get('c21ListingExpired');
  $last_cron_run = variable_get('c21_listings_last_cron_run', 0);

  if (time() - $last_cron_run > 60*60*24) {
    $query = new EntityFieldQuery;
    $listings = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'listing')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_listing_list_date', 'value2', date("Y-m-d"), '<=')
      ->execute();

    if (!empty($listings['node'])) {
      foreach ($listings['node'] as $nid => $info) {
        $queue->createItem($nid);
      }
    }

    variable_set('c21_listings_last_cron_run', time());
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function c21_listings_cron_queue_info() {
  $queues = array();
  $queues['c21ListingExpired'] = array(
    'worker callback' => 'c21_listing_expire_listing',
    'time' => 60,
  );

  return $queues;
}

/**
 * Implements hook_token_info().
 */
function c21_listings_token_info() {
  $type = array(
    'name' => t('Century21 Listings'),
    'description' => t('Tokens related to Century21 Listings.')
  );

  $tokens = array(
    'sellers' => array(
      'name' => t("The sellers of this listing."),
      'description' => t("The sellers of this listing."),
    ),
    'price' => array(
      'name' => t("The listing price of this listing."),
      'description' => t("The listing price of this listing."),
    ),
    'period' => array(
      'name' => t("The time frame of this listing."),
      'description' => t("The time frame of this listing."),
    ),
    'commission' => array(
      'name' => t("The commission associated with this listing."),
      'description' => t("The commission associated with this listing. Values between 1 and 100 are displayed as percents, otherwise as dollar amounts."),
    ),
  );

  return array(
    'types' => array('c21_listing' => $type),
    'tokens' => array('c21_listing' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function c21_listings_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'c21_listing') {
    $wrapper = entity_metadata_wrapper('node', $data['node']);

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'sellers':
          $seller_names = array();
          for ($i = 1; $i <= 2; $i++) {
            $name = $wrapper->{'field_listing_seller' . $i . '_name'}->value();
            $company = $wrapper->{'field_listing_seller' . $i . '_company'}->value();
            $firstname = !empty($name['first']) ? $name['first'] : '';
            $lastname = !empty($name['second']) ? $name['second'] : '';

            if (!empty($company) && !empty($firstname) && !empty($lastname)) {
              $seller_names[] = $company . ' c/o ' . $firstname . ' ' . $lastname;
            }
            elseif (!empty($company)) {
              $seller_names[] = $company;
            }
            elseif (!empty($firstname) && !empty($lastname)) {
              $seller_names[] = $firstname . ' ' . $lastname;
            }
          }

          $replacements[$original] = implode(' & ', $seller_names);
          break;

        case 'price':
          $replacements[$original] = '$' . number_format($wrapper->field_listing_list_price->value(), 2);
          break;

        case 'period':
          $dates = $wrapper->field_listing_list_date->value();
          $months = (int)abs((strtotime($dates['value']) - strtotime($dates['value2'])) / (60*60*24*30));

          $replacements[$original] = $months . ' months, ending on ' . date('F d, Y', strtotime($dates['value2']));
          break;

        case 'commission':
          $commission = (int) $wrapper->field_listing_commission->value();
          $replacements[$original] = $commission <= 100 ? $commission . '% of the selling price' : '$' . number_format($commission, 2);
          break;
      }
    }
  }

  // Return the replacements.
  return $replacements;
}

/**
 * Implements hook_field_formatter_info().
 */
function c21_listings_field_formatter_info() {
  $info = array(
    'listing_id' => array(
      'label' => t('Listing Id'),
      'field types' => array('text'),
      'description' => t('Displays text as a Listing Id by appending "-[nid]".'),
    ),
    'us_phone_number' => array(
      'label' => t('Telephone Number (US)'),
      'field types' => array('text'),
      'description' => t('Displays text as a tel: link'),
    ),
    'email' => array(
      'label' => t('Email'),
      'field types' => array('text'),
      'description' => t('Displays text as a mailto: link'),
    )
  );

  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function c21_listings_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'listing_id':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = strtoupper($item['safe_value']) . '-' . $entity->nid;
      }
      break;
    case 'us_phone_number':
      foreach ($items as $delta => $item) {
        $element[$delta]['#theme'] = 'link';
        $element[$delta]['#text'] = $item['safe_value'];
        $element[$delta]['#path'] = _c21_format_phone_number_link($item['safe_value']);
        $element[$delta]['#options'] = array(
          'attributes' => array('class' => array('phone-number us-phone-number')),
          'html' => FALSE,
        );
      }
      break;
    case 'email':
      foreach ($items as $delta => $item) {
        $element[$delta]['#theme'] = 'link';
        $element[$delta]['#text'] = $item['safe_value'];
        $element[$delta]['#path'] = 'mailto:' . $item['safe_value'];
        $element[$delta]['#options'] = array(
          'attributes' => array('class' => array('email')),
          'html' => FALSE,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_default_field_bases_alter().
 *
 * @see https://gist.github.com/sprice/2003047
 */
function c21_listings_field_default_field_bases_alter(&$fields) {
  if (arg(2) != 'features') {
    // Set the default image for listings featured photo field & agent photos.
    if (!empty($fields['field_listing_featured_photo'])) {
      $fields['field_listing_featured_photo']['settings']['default_image'] = variable_get('c21_listings_default_featured_photo_fid', 0);
    }
    if (module_exists('c21_rets') && !empty($fields['field_mls_photos'])) {
      $fields['field_mls_photos']['settings']['default_image'] = variable_get('c21_listings_default_featured_photo_fid', 0);
    }
    if (!empty($fields['field_agent_photo'])) {
      $fields['field_agent_photo']['settings']['default_image'] = variable_get('c21_agents_default_photo_fid', 0);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_agent_node_form_alter(&$form, &$form_state) {
  // Set a placeholder for the name field.
  $form['title']['#placeholder'] = t('Roy B. Hull, Owner');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_listing_node_form_alter(&$form, &$form_state) {
  // Add custom CSS and JS files for this form.
  $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_forms.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'c21_listings') . '/js/c21_listings_forms.js';

  // Add the listing id number as a suffix to the listing id prefix field.
  $form['field_listing_id_prefix'][LANGUAGE_NONE][0]['value']['#field_suffix'] = ' &ndash; ' . (isset($form['#node']->nid) ? $form['#node']->nid : '#####');

  // MLS # should only be displayed for "exclusive" listings.
  $form['field_listing_mls']['#states'] = array(
    'visible' => array(
      '#edit-field-listing-type-und' => array(
        array('value' => LISTING_TYPE_EXCLUSIVE_NID),
        array('value' => LISTING_TYPE_EXCLUSIVE_RIGHT_NID),
      ),
    ),
  );

  // Add some classes to the agent fields.
  $form['field_listing_agent']['#attributes']['class'][] = 'field-agents';
  $form['field_listing_sale_agent']['#attributes']['class'][] = 'field-agents';

  // Remove the fieldset from date fields.
  $form['field_listing_list_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');
  $form['field_listing_year_built'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');
  $form['field_listing_closing_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array('form_element');

  // Rename the publishing options field.
  $form['options']['#title'] = t('Listing options');
  $form['options']['status']['#title'] = t('Active listing');
  $form['options']['promote']['#title'] = t('Featured listing');
  $form['options']['sticky']['#access'] = FALSE;

  $form['field_listing_bathrooms'][LANGUAGE_NONE][0]['value']['#step'] = .5;
  $form['field_listing_acreage'][LANGUAGE_NONE][0]['value']['#step'] = .001;

  // Hide the latitude and longitude fields in a fieldset.
  $form['map_coordinates'] = array(
    '#type' => 'fieldset',
    '#description' => t('Longitude and latitude are only necessary if the automatically generated map is incorrect. <a href="!url" target="_blank">Use this tool</a> to find the proper coordinates', array('!url' => 'http://universimmedia.pagesperso-orange.fr/geo/loc.htm')),
    '#title' => t('Map Coordinates'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1000,
  );
  $form['map_coordinates']['field_listing_longitude'] = $form['field_listing_longitude'];
  $form['map_coordinates']['field_listing_latitude'] = $form['field_listing_latitude'];
  unset($form['field_listing_longitude']);
  unset($form['field_listing_latitude']);
  $form['#group_children']['map_coordinates'] = 'group_listing_location_info';

  // Add a "Save & Print" button.
  $form['actions']['save_print'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => t('Save & Print'),
    '#weight' => 7,
    '#submit' => array('node_form_submit', 'c21_listing_save_and_print'),
  );

  // Hide structure-based fields if "land" is selected. We cannot use #states
  // because autocomplete deluxe does not support it. Instead we use custom js.
  $structure_fields = array('field_listing_acreage');
  $form['#attached']['js'][] = array(
    'data' => array('listing_structural_fields' => $structure_fields),
    'type' => 'setting',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_taxonomy_manager_form_alter(&$form, &$form_state) {
  if (isset($form['term_data']['tid'])) {
    $form['term_data']['c21_term_normalize'] = array(
      '#type' => 'textarea',
      '#title' => 'Normalization terms',
      '#weight' => 15,
      '#rows' => 2,
      '#description' => t('These terms will be converted to %term during MLS import. Separate multiple terms with a comma.', array('%term' => $form['term_data']['name']['#default_value'])),
      '#default_value' => c21_listings_get_term_normalizations($form['term_data']['tid']['#value']),
    );
    $form['term_data']['save']['#submit'][] = 'c21_listings_form_taxonomy_manager_form_submit';
  }
}

/**
 * Form submit function for the taxonomy manager term edit form.
 */
function c21_listings_form_taxonomy_manager_form_submit($form, &$form_state) {
  if (isset($form_state['values']['tid']) && isset($form_state['values']['c21_term_normalize'])) {
    $terms_to_normalize = array_map('trim', explode(',', $form_state['values']['c21_term_normalize']));
    $tid = $form_state['values']['tid'];
    $vocabulary = $form_state['values']['vocabulary_machine_name'];

    // Delete all term normalizations for this term.
    db_delete('c21_listings_term_normalization')
      ->condition('tid', $tid)
      ->execute();

    // Add terms to normalize based on the current submission.
    foreach ($terms_to_normalize as $term_to_normalize) {
      $record = array(
        'tid' => $tid,
        'term_to_normalize' => $term_to_normalize,
      );
      drupal_write_record('c21_listings_term_normalization', $record);
    }
  }
}

/**
 * Element process function.
 *
 * Adds a phone number mask to seller/buyer phone fields.
 */
function c21_listings_element_process($element, &$form_state, $form) {
  if (preg_match('/^field_listing_(seller|buyer)([1-9]+)_phone/', $element['#name'])) {
    $data['masked_input']['elements'][$element['#id']] = array(
      'id' => $element['#id'],
      'mask' => '(999) 999-9999? x99999',
      'placeholder' => '_',
    );

    $element['#attached']['js'][] = libraries_get_path('maskedinput') . '/jquery.maskedinput-1.3.js';
    $element['#attached']['js'][] = drupal_get_path('module','masked_input') . '/js/masked_input.js';
    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => $data,
    );
  }

  return $element;
}

/**
 * Form submit function called on the listing node edit form when the "Save &
 * Print" button has been pressed.
 */
function c21_listing_save_and_print($form, &$form_state) {
  // We use "GET" instead of $form_state[redirect] because the "destination"
  // takes priority over form['redirect']
  $_GET['destination'] = 'printpdf/node/' . $form_state['values']['nid'];
  drupal_redirect_form($form_state);
}

/**
 * Implements hook_date_combo_process_alter().
 */
function c21_listings_date_combo_process_alter(&$element, $form_state, $context) {
  $element['show_todate']['#access'] = FALSE;
  unset($element['value']['#description']);
  unset($element['value']['#attributes']);
  unset($element['value2']['#description']);
  unset($element['value2']['#title']);
  unset($element['value2']['#attributes']);

  $element['value']['#wrapper_attributes']['class'] = array('start-date-wrapper');
  $element['value2']['#wrapper_attributes']['class'] = array('end-date-wrapper');
}

/**
 * Implements hook_date_popup_process_alter().
 */
function c21_listings_date_popup_process_alter(&$element, $form_state, $context) {
  if (isset($element['#field']) && $context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
    if ($element['#date_title'] == 'List Date End date' && $context['form'][$element['#field']['field_name']][LANGUAGE_NONE][0]['#type'] == 'date_combo') {
      $element['#prefix'] = '<span class="fromto">to</span>';
    }
    $element['date']['#description'] = '';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_listings_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-c21-reports-listing-report' || $form['#id'] == 'views-exposed-form-c21-reports-views-data-export-1') {
    $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_reports.css';
    $form['field_listing_list_date_value2']['min']['#title'] = '';
    $form['field_listing_list_date_value2']['min']['#attributes']['placeholder'] = t('From');
    $form['field_listing_list_date_value2']['min']['#date_format'] = 'm/d/Y';
    $form['field_listing_list_date_value2']['max']['#title'] = '';
    $form['field_listing_list_date_value2']['max']['#attributes']['placeholder'] = t('To');
    $form['field_listing_list_date_value2']['max']['#date_format'] = 'm/d/Y';
  }

  if ($form_state['view']->name == 'c21_workbench_recent_content') {
    $form['#attached']['css'][] = drupal_get_path('module', 'c21_listings') . '/css/c21_listings_reports.css';
    $form['#validate'][] = 'c21_listings_workbench_recent_content_exposed_form_validate';
  }
}

/**
 * Form validation function for the exposed filter on the workbench recent
 * content view.
 */
function c21_listings_workbench_recent_content_exposed_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['nid'])) {
    $form_state['values']['nid'] = substr($form_state['values']['nid'], ($pos = strpos($form_state['values']['nid'], '-')) !== FALSE ? $pos + 1 : 0);
  }
}

/**
 * Return a themed list of links to various reports.
 */
function c21_listings_workbench_links($mode = 'common') {
  switch($mode) {
    case 'common':
      $links = array(
        'create-listing' => array(
          'title' => t('Create Listing'),
          'href' => 'node/add/listing',
        ),
        'create-agent' => array(
          'title' => t('New Agent'),
          'href' => 'node/add/agent',
        ),
        'create-user' => array(
          'title' => t('New User'),
          'href' => 'user/add',
        ),
      );
      break;
    case 'report':
      $default_query = array(
        'field_listing_list_date_value2[min][date]' => '',
        'field_listing_list_date_value2[max][date]' => '',
        'field_listing_agent_target_id' => 'All',
        'field_listing_building_type_value' => 'All',
        'field_listing_status_value' => 'All',
        'items_per_page' => '25',
        'order' => 'field_listing_list_date_1',
        'sort' => 'desc',
      );
      $link_defaults = array(
        'href' => 'admin/reports/c21/listings',
      );
      if (module_exists('views_data_export')) {
        $link_defaults['export_href'] = 'listings_report.xls';
        $link_defaults['export_icon_src'] = drupal_get_path('module', 'views_data_export') . '/images/xls.png';
        $link_defaults['export_file_type'] = 'xls';
      }

      $links = array(
        'expiring-listings-all' => array(
          'title' => t('Expiring Listings (All)'),
          'query' => $default_query,
        ) + $link_defaults,
        'expiring-listings-land' => array(
          'title' => t('Expiring Listings (Land)'),
          'query' => array('field_listing_list_date_1' => 'land') + $default_query,
        ) + $link_defaults,
        'expiring-listings-residence' => array(
          'title' => t('Expiring Listings (Residences)'),
          'query' => array('field_listing_building_type_value' => 'residence') + $default_query,
        ) + $link_defaults,
        'mls-listings' => array(
          'title' => t('MLS Listings'),
          'query' => array(
              'field_listing_status_value' => 'for_sale',
              'order' => 'field_listing_mls',
              'sort' => 'asc') + $default_query,
        ) + $link_defaults,
        'listings-by-price-all' => array(
          'title' => t('Listings by Price (All)'),
          'query' => array('order' => 'field_listing_list_price') + $default_query,
        ) + $link_defaults,
        'listings-by-price-land' => array(
          'title' => t('Listings by Price (Land)'),
          'query' => array(
              'field_listing_building_type_value' => 'land',
              'order' => 'field_listing_list_price') + $default_query,
        ) + $link_defaults,
        'listings-by-price-residence' => array(
          'title' => t('Listings by Price (Residences)'),
          'query' => array(
              'field_listing_building_type_value' => 'residence',
              'order' => 'field_listing_list_price') + $default_query,
        ) + $link_defaults,
      );
      break;
  }

  if (!empty($links)) {
    $output = theme('c21_workbench_links', array(
      'links' => $links,
      'attributes' => array(
        'class' => 'c21_listings_workbench_list c21_listings_' . $mode . '_list',
      ),
    ));
  }
  else {
    $output = '';
  }

  return $output;
}

/**
 * Set the provided listing to unpublished.
 *
 * @param int $nid
 *   The node id of the listing to be expired.
 */
function c21_listing_expire_listing($nid) {
  $listing = node_load($nid);
//  $listing->field_listing_status[LANGUAGE_NONE][0] = 'inactive';
  $listing->status = 0;
  node_save($listing);
}

/**
 * Get the normalization terms for a given tid as a comma delimited list.
 *
 * @param $tid
 *
 * @return string
 */
function c21_listings_get_term_normalizations($tid) {
  $result = db_select('c21_listings_term_normalization', 'cltn')
    ->fields('cltn', array('term_to_normalize'))
    ->condition('tid', $tid)
    ->execute()
    ->fetchAllKeyed(0, 0);

  return implode(', ', $result);
}

/**
 * Returns a list of agents with basic meta data.
 *
 * @return array
 *   An array agents, keyed by nid, including 'full_name', 'last_name',
 *   'current_office', and 'status'.
 */
function c21_listings_get_agents() {
  $agents = array();

  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'agent')
    ->condition('status', 1)
    ->orderBy('title')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    $agent = node_load($record['nid']);

    $agents[$record['nid']] = array(
      'full_name' => $agent->title,
      'last_name' => $agent->name,
      'current_office' => $agent->field_agent_primary_office[LANGUAGE_NONE][0]['value'],
      'status' => $agent->field_agent_status[LANGUAGE_NONE][0]['value'],
    );
  }

  print drupal_json_output($agents);
  exit();
}

/**
 * Return an array of the "floors" for which listing data is collected.
 *
 * @return array
 */
function c21_listings_get_floors() {
  $floors = array(
    'f1' => t('Floor 1'),
    'f2' => t('Floor 2'),
    'b' => t('Basement'),
  );

  return $floors;
}

/**
 * Return an array of the "rooms" for which listing data is collected.
 *
 * @return array
 */
function c21_listings_get_rooms() {
  $rooms = array(
    'living_room' => t('Living Room'),
    'dining_room' => t('Dining Room'),
    'kitchen' => t('Kitchen'),
    'liv_din' => t('Living/Dining Room'),
    'din_kitchen' => t('Dining/Kitchen'),
    'bathroom1' => t('Bathroom 1'),
    'bathroom2' => t('Bathroom 2'),
    'bathroom3' => t('Bathroom 3'),
    'bedroom1' => t('Bedroom 1'),
    'bedroom2' => t('Bedroom 2'),
    'bedroom3' => t('Bedroom 3'),
    'bedroom4' => t('Bedroom 4'),
    'bedroom5' => t('Bedroom 5'),
    'family_room' => t('Family Room'),
    'laundry' => t('Laundry Room'),
    'other1' => t('Other 1'),
    'other2' => t('Other 2'),
    'other3' => t('Other 3'),
  );

  return $rooms;
}

/**
 * Theme function for the listing_id field formatter.
 */
function theme_c21_listings_listing_id($variables) {
  return strtoupper($variables['prefix']) . '-' . $variables['nid'];
}

/**
 * Format a phone number to be appropraite for use in the href of a tel: link.
 *
 * @param  string $phone_number
 *   A human readible phone number.
 *
 * @return string
 *   The formatted phone number beginning with "tel:". The strings "ext" and "x"
 *   will be replaced with a "+".
 */
function _c21_format_phone_number_link($phone_number) {
  $formatted_phone_number = preg_replace("/x|ext|ext./i", '+', $phone_number);
  $formatted_phone_number = preg_replace("/[^0-9,+]/i", '', $formatted_phone_number);

  return 'tel:' . $formatted_phone_number;
}

/**
 * Given a listing node, build a link to google maps.
 *
 * @param object $entity
 *
 * @return array
 */
function _c21_listings_get_gmap_link($entity) {
  $gmap_link = array();
  $q = '';

  switch ($entity->type) {
    case 'listing':
      $wrapper = entity_metadata_wrapper('node', $entity);
      $latitude = $wrapper->field_listing_latitude->value();
      $longitude = $wrapper->field_listing_longitude->value();
      $street = $wrapper->field_listing_street->value();
      $town = isset($wrapper->field_listing_township->value()->name) ? $wrapper->field_listing_township->value()->name : '';
      $state = $wrapper->field_listing_state->value();
      break;
    case 'drealty_listing':
    case 'mls_residential_listing':
      $latitude = '';
      $longitude = '';
      $street = _c21_get_address_info($entity, 'street');
      $town = _c21_get_address_info($entity, 'town');
      $state = _c21_get_address_info($entity, 'state');
      break;
  }


  if (!empty($longitude) && !empty($latitude)) {
    $q = $latitude . ',' . $longitude;
  }
  elseif (!empty($street) && !empty($town)) {
    $q = $street . ', ' . $town . ', ' . (!empty($state) ? $state : 'PA');
  }

  if (!empty($q)) {
    $gmap_link = array(
      'title' => t('See map'),
      'href' => 'http://maps.google.com/maps',
      'query' => array(
        'q' => $q,
        'hl' => 'en', // Language.
        'iwloc' => 'A', // Information Bubble [A|''].
        'z' => '11', // Zoom.
        't' => 'm', // Map type.
      ),
      'attributes' => array(
        'target' => '_blank',
      ),
    );
  }

  return $gmap_link;
}

/**
 * Given a listing ID, return the corresponding node id.
 *
 * @param string $listing_id
 *
 * @return bool|int
 */
function _c21_listing_get_nid($listing_id) {
  $nid_parts = explode('-', $listing_id);
  if (is_array($nid_parts) && count($nid_parts) == 2) {
    $nid = array_pop($nid_parts);
    return is_numeric($nid) ? $nid : FALSE;
  }
}

/**
 * Given an nid, return the most recently created vid.
 *
 * @param $nid
 *
 * @return bool|int|string
 */
function _c21_listing_get_vid($nid) {
  $vid = db_select('node', 'n')
    ->fields('n', array('vid'))
    ->condition('n.nid', $nid, '=')
    ->execute()
    ->fetchField();
  return is_numeric($vid) ? $vid : FALSE;
}
