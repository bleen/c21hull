<?php
/**
 * @file
 * Code for the c21 RETS feature.
 */

include_once 'c21_rets.features.inc';

/**
 * Implements hook_entity_load().
 */
function c21_rets_entity_load($entities, $type) {
  if ($type == 'drealty_listing') {
    foreach ($entities as $id => $listing) {
      if ($listing->type == "mls_residential_listing") {
        $listing->label = _c21_rets_build_listing_title($listing);
      }
    }
  }
}

/**
 * Implements hook_drealty_import_presave_alter().
 */
function c21_rets_drealty_import_presave_alter(&$listing, $context) {
  // Note: this function was replaced by c21_drealty_import_presave_alter().
  foreach ($context['field_mappings'] as $field_name => $mapping) {
    if ($mapping->field_api_type == 'taxonomy_term_reference' && !empty($context['rets_item'][$mapping->systemname])) {
      $field_info = field_info_field($field_name);
      $vocabulary_name = $field_info['settings']['allowed_values'][0]['vocabulary'];

      $term = _c21_rets_get_term_by_name($field_name, $context['rets_item'][$mapping->systemname], $vocabulary_name);

      $listing->{$field_name}[LANGUAGE_NONE][0]['tid'] = $term->tid;
    }
  }
}

/**
 * Get an existing term object for the given term name or create a new term
 * object and return than.
 *
 * @param  string $field_name
 *   The term reference field name where this term will be stored.
 *
 * @param  string $term_name
 *   The term name to search for. This might be tweaked before the search based
 *   on the value of $field_name.
 *
 * @param  string $vocabulary_name
 *   The name of the vocabulary to search.
 *
 * @return term object
 */
function _c21_rets_get_term_by_name($field_name, $term_name, $vocabulary_name) {
  // Note: this function was replaced by _c21_get_term_by_name().
  switch ($field_name) {
    case 'field_mls_school_district':
      // Remove the digits that sometimes precede the school district name.
      $term_name = preg_replace('/^\d{3,}\s?\-?\s?/', '', $term_name);
      break;
    case 'field_mls_city':
      // Remove the " - Foo County" information from the city.
      $term_name = preg_replace('/\s+((Boro)|(Twp))\s?-{1}\s?[A-Za-z]+\s{1}([Cc]ounty){1}$/', '', $term_name);
      // Remove the ", NY" type state information from the city.
      $term_name = preg_replace('/\s*,{1}\s*[A-Za-z]{2}$/', '', $term_name);
      break;
  }

  $terms = taxonomy_get_term_by_name($term_name, $vocabulary_name);
  $term = !empty($terms) ? array_shift($terms) : NULL;

  if (is_null($term)) {
    // First check if this term can be normalized.
    $normalized_tid = db_select('c21_listings_term_normalization', 'cltn')
      ->fields('cltn', 'tid')
      ->condition('term_to_normalize', $term_name)
      ->execute()
      ->fetchField();

    if (!empty($normalized_tid)) {
      $term = taxonomy_term_load($normalized_tid);
    }
    else {
      // This is a new term and there is no normalization.
      $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
      $term = new stdClass();
      $term->name = ucwords($term_name);
      $term->vid = $vocabulary->vid;
      taxonomy_term_save($term);
    }
  }

  return $term;
}

/**
 * Creates a human-readible title for an MLS listing.
 *
 * @param  drealtyListing $listing
 *
 * @return string
 */
function _c21_rets_build_listing_title($listing) {
  $stats_values = array();
  $stats_fields = array(
    'bedroom' => 'bedrooms',
    'bathroom' => 'bathrooms',
  );
  $superlatives = array(
    t('great find'),
    t('worth a look'),
    t('check this out'),
  );

  foreach ($stats_fields as $label => $field) {
    $value = !empty($listing->{'field_mls_' . $field}) ? $listing->{'field_mls_' . $field}[LANGUAGE_NONE][0]['value'] : '';
    if (is_numeric($value)) {
      $stats_values[] = $value . ' ' . $label;
    }
  }

  if (isset($listing->field_mls_city[LANGUAGE_NONE][0]['value'])) {
    $township = $listing->field_mls_city[LANGUAGE_NONE][0]['value'];
  }
  elseif (isset($listing->field_mls_city[LANGUAGE_NONE][0]['tid'])) {
    $term = taxonomy_term_load($listing->field_mls_city[LANGUAGE_NONE][0]['tid']);
    $township = $term->name;
  }
  else {
    $township = '';
  }

  if (empty($stats_values)) {
    $stats_values[] = $superlatives[array_rand($superlatives)];
  }

  $title = ucwords(implode(', ', $stats_values));
  if (!empty($township)) {
    $title .= ' in ' . $township;
  }

  return $title;
}

/**
 * Returns the street portion of a drealty listing address.
 *
 * @param object $entity
 *   A drealty listing entity
 *
 * @param string $info
 *   The type of information being requested. Options are street, town or state.
 *
 * @return string
 */
function _c21_rets_get_address_info($entity, $info) {
  $return = '';

  switch ($info) {
    case 'street':
      if (isset($entity->field_mls_street_number[LANGUAGE_NONE][0]['value'])) {
        $return .= $entity->field_mls_street_number[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_direction[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_direction[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_name[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_suffix[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_suffix[LANGUAGE_NONE][0]['value'];
      }
      break;
    case 'town':
      if (isset($entity->field_mls_city[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($entity->field_mls_city[LANGUAGE_NONE][0]['tid']);
        $return .= $term->name;
      }
      break;
    case 'state':
      if (isset($entity->field_mls_state[LANGUAGE_NONE][0]['value'])) {
        $return .= $entity->field_mls_state[LANGUAGE_NONE][0]['value'];
      }
      break;
  }
  return $return;
}
