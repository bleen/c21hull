<?php
/**
 * @file
 * Code for the c21 feature.
 */

include_once 'c21.features.inc';

// Give each of the date format types a machine name.
define('C21_DATE_TYPE_VERY_SHORT', 'c21_date_type_very_short');
define('C21_DATE_TYPE_VERY_LONG', 'c21_date_type_very_long');

// Define the date formats to be passed to date().
define('C21_DATE_FORMAT_VERY_SHORT', 'Y');
define('C21_DATE_FORMAT_SHORT', 'M d, Y');
define('C21_DATE_FORMAT_MEDIUM', 'F d, Y');
define('C21_DATE_FORMAT_LONG', 'F d Y, g:ia');
define('C21_DATE_FORMAT_VERY_LONG', 'l, F d Y, g:ia');

/**
 * Implements hook_theme().
 */
function c21_theme(){
  return array(
    'c21_office_address' => array(
      'variables' => array(
        'office_name' => '',
        'office_info' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function c21_menu() {
  $items['admin/workbench/content/mls'] = array(
    'title' => 'MLS Listings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/content/drealty_listings'),
    'access callback' => TRUE,
    'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function c21_menu_alter(&$items) {
  $items['node']['access callback'] = FALSE;
  $items['node/add']['access callback'] = FALSE;
  $items['admin/structure/taxonomy']['access callback'] = FALSE;
}

/**
 * Implements hook_cron().
 */
function c21_cron() {
  // Delete inactive listings.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'drealty_listing')
    ->propertyCondition('active', 0);
  $result = $query->execute();

  if (!empty($result['drealty_listing'])) {
    $queue = DrupalQueue::get('c21InactiveMLSListings');
    foreach (array_keys($result['drealty_listing']) as $id) {
      $queue->createItem($id);
    }
  }

  // Delete C21hull listings.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'drealty_listing')
    ->fieldCondition('field_mls_listing_office', 'value', '%Century 21 Roy B. Hull%', 'LIKE');
  $result = $query->execute();

  if (!empty($result['drealty_listing'])) {
    $queue = DrupalQueue::get('c21OwnMLSListings');
    foreach (array_keys($result['drealty_listing']) as $id) {
      $queue->createItem($id);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function c21_cron_queue_info() {
  $queues['c21InactiveMLSListings'] = array(
    'worker callback' => 'c21_delete_mls_listing',
    'time' => 60,
  );
  $queues['c21OwnMLSListings'] = array(
    'worker callback' => 'c21_delete_mls_listing',
    'time' => 60,
  );

  return $queues;
}

function c21_delete_mls_listing($id) {
  entity_delete('drealty_listing', $id);
}

/**
 * Implements hook_user_login().
 */
function c21_user_login(&$edit, $account) {
  if (user_access('access workbench')) {
    drupal_goto('admin/workbench');
  }
}

/**
 * Implements hook_entity_load().
 */
function c21_entity_load($entities, $type) {
  if ($type == 'drealty_listing') {
    foreach ($entities as $id => $listing) {
      if ($listing->type == "mls_residential_listing") {
        $listing->label = _c21_build_listing_title($listing);
      }
    }
  }
}

/**
 * Implements hook_drealty_import_presave_alter().
 */
function c21_drealty_import_presave_alter(&$listing, $context) {
  foreach ($context['field_mappings'] as $field_name => $mapping) {
    if ($mapping->field_api_type == 'taxonomy_term_reference' && !empty($context['rets_item'][$mapping->systemname])) {
      $field_info = field_info_field($field_name);
      $vocabulary_name = $field_info['settings']['allowed_values'][0]['vocabulary'];

      $term = _c21_get_term_by_name($field_name, $context['rets_item'][$mapping->systemname], $vocabulary_name);

      // Term may come back as NULL.
      if (!is_null($term)) {
        $listing->{$field_name}[LANGUAGE_NONE][0]['tid'] = $term->tid;
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function c21_entity_view_alter(&$build, $type) {
  if ($type == 'drealty_listing' && $build['#view_mode'] == 'search') {
    if (!empty($build['entity']->field_mls_lakefront[LANGUAGE_NONE][0]['value'])) {
      $lakefront_value = $build['entity']->field_mls_lakefront[LANGUAGE_NONE][0]['value'];
      if (!empty($lakefront_value) && !in_array(strtolower($lakefront_value), array('no', 'none', '0', 'n'))) {
        $build['extra_lakefront_info'] = array(
          '#markup' => "lakefront, waterfront, riverfront, water, pond, stream, lake, river"
        );
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function c21_block_info() {
  $blocks['c21_footer'] = array(
    'info' => t('Footer'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c21_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'c21_footer':
      $block['subject'] = '';
      $block['content'] = array(
        'address_dingmans' => array(
          '#theme' => 'c21_office_address',
          '#office_name' => 'dingmans',
          '#office_info' => c21_get_office_info('dingmans'),
        ),
        'address_milford' => array(
          '#theme' => 'c21_office_address',
          '#office_name' => 'milford',
          '#office_info' => c21_get_office_info('milford'),
        ),
        'copyright' => array(
          '#attributes' => array(
            'class' => array('copyright'),
          ),
          '#theme_wrappers' => array('container'),
          '#markup' => 'Each Office is Independently Owned and Operated. &copy; ' . date('Y') . ' Century 21 Real Estate LLC.</br>CENTURY 21&reg; is a registered trademark licensed to Century 21 Real Estate LLC.</br>Equal Housing Opportunity.',
        ),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view().
 */
function c21_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && !$node->status) {
    drupal_set_message(t('This %type is inactive and cannot be viewed by the public.', array('%type' => $node->type)), 'warning', FALSE);
  }
}

/**
 * Implements hook_taxonomy_term_load().
 */
function c21_taxonomy_term_load($terms) {
  // By business rule, all taxonomy terms should be title case.
  foreach ($terms as $term) {
    $term->name = ucwords($term->name);
  }
}

/**
 * Implements hook_workbench_content_alter().
 */
function c21_workbench_content_alter(&$output) {
  if (module_exists('c21_listings')) {
    $output['c21_workbench_links'] = array(
      'common' => array(
        '#markup' => '<h2>' . t('Common Tasks') . '</h2>' . c21_listings_workbench_links('common'),
      ),
      'reports' => array(
        '#markup' => '<h2>' . t('Reports') . '</h2>' . c21_listings_workbench_links('report'),
      ),
      '#theme' => 'workbench_element',
      '#attributes' => array(
        'class' => array('left', 'clearfix'),
      ),
    );
    $output['#attached']['css'][] = drupal_get_path('module', 'c21') . '/css/c21_workbench.css';
    unset($output['workbench_current_user']);
  }

  $output['c21_workbench_edits_by_user'] = $output['workbench_edited'];
  $output['c21_workbench_edits_by_user']['#view'] = 'c21_workbench_edits_by_user';
  $output['c21_workbench_edits_by_user']['#view_display'] = 'block_1';
  unset($output['workbench_edited']);

  $output['c21_workbench_recent_content'] = $output['workbench_recent_content'];
  $output['c21_workbench_recent_content']['#view'] = 'c21_workbench_recent_content';
  $output['c21_workbench_recent_content']['#view_display'] = 'block_1';
  unset($output['workbench_recent_content']);

}

/**
 * Implements hook_date_formats().
 */
function c21_date_formats() {
  $formats = array();

  $formats[] = array(
    'type' => C21_DATE_TYPE_VERY_SHORT,
    'format' => C21_DATE_FORMAT_VERY_SHORT,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'short',
    'format' => C21_DATE_FORMAT_SHORT,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'medium',
    'format' => C21_DATE_FORMAT_MEDIUM,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'long',
    'format' => C21_DATE_FORMAT_LONG,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => C21_DATE_TYPE_VERY_LONG,
    'format' => C21_DATE_FORMAT_VERY_LONG,
    'locales' => array(),
  );

  return $formats;
}

/**
 * Implements hook_date_format_types().
 */
function c21_date_format_types() {
  $types = array();
  $types[C21_DATE_TYPE_VERY_SHORT] = t('Very Short');
  $types[C21_DATE_TYPE_VERY_LONG] = t('Very Long');
  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['description']['#format'] = "rich_text";
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_form_user_profile_form_alter(&$form, &$form_id) {
  $form['picture']['#access'] = FALSE;
}

/**
 * Return office location information.
 *
 * @param string $office
 *
 * @return stdClass || NULL
 */
function c21_get_office_info($office) {
  $office_info = new stdClass();

  switch ($office) {
    case 'milford':
      $office_info->street = '205 E. Harford St.';
      $office_info->city = 'Milford';
      $office_info->state = 'PA';
      $office_info->zip = '18337';
      $office_info->phone1 = '1-877-296-9921';
      $office_info->phone2 = '(570) 296-9921';
      break;

    case 'dingmans':
      $office_info->street = '1869 Route 739';
      $office_info->city = 'Dingmans Ferry';
      $office_info->state = 'PA';
      $office_info->zip = '18328';
      $office_info->phone1 = '1-800-458-4855';
      $office_info->phone2 = '(570) 828-9591';
      break;

    default:
      return NULL;
  }

  return $office_info;
}

/**
 * Return a file object after saving a default image and storing the fid
 * in a variable.
 *
 * @param array $default_image
 *   An associative array containing:
 *   - scheme: File API stream wrapper scheme (ie: 'public://', 'private://')
 *   - dest_directory: The directory within the files directory the default
 *     image will be copied to. No leading or trailing slash.
 *   - source_path: The full path to the existing default image that will
 *     be copied.
 *   - file_name: The name of the default image.
 *   - variable: The variable name that will store the default image fid.
 *
 * @return object
 *   A file object of the saved default image file.
 *
 * @see https://gist.github.com/sprice/2003047
 */
function c21_image_create($default_image) {
  $file_uri = $default_image['scheme'] . $default_image['dest_directory'] . '/' . $default_image['file_name'];
  $full_dir = $default_image['scheme'] . $default_image['dest_directory'];
  file_prepare_directory($full_dir, FILE_CREATE_DIRECTORY);
  file_unmanaged_copy($default_image['source_path'], $file_uri, FILE_EXISTS_REPLACE);
  $file = (object) array(
    'uid' => 1,
    'status' => FILE_STATUS_PERMANENT,
    'filename' => $default_image['file_name'],
    'uri' => $file_uri,
    'filemime' => file_get_mimetype($default_image['source_path']),
  );
  $file = file_save($file);
  if ($file) {
    variable_set($default_image['variable'], $file->fid);
  }
  return $file;
}

/**
 * Get an existing term object for the given term name or create a new term
 * object and return than.
 *
 * @param  string $field_name
 *   The term reference field name where this term will be stored.
 *
 * @param  string $term_name
 *   The term name to search for. This might be tweaked before the search based
 *   on the value of $field_name.
 *
 * @param  string $vocabulary_name
 *   The name of the vocabulary to search.
 *
 * @return object | NULL
 */
function _c21_get_term_by_name($field_name, $term_name, $vocabulary_name) {
  switch ($field_name) {
    case 'field_mls_school_district':
      // Remove the digits that  cometimes preceed the school district name.
      $term_name = preg_replace('/^\d{3,}\s?\-?\s?/', '', $term_name);
      break;
    case 'field_mls_city':
      // Remove the " - Foo County" information from the city.
      $term_name = preg_replace('/\s+((Boro)|(Twp))\s?-{1}\s?[A-Za-z]+\s{1}([Cc]ounty){1}$/', '', $term_name);
      // Remove the ", NY" type state information from the city.
      $term_name = preg_replace('/\s*,{1}\s*[A-Za-z]{2}$/', '', $term_name);
      break;
  }

  $terms = taxonomy_get_term_by_name($term_name, $vocabulary_name);
  $term = !empty($terms) ? array_shift($terms) : NULL;

  if (is_null($term)) {
    // First check if this term can be normalized.
    $normalized_tid = db_select('c21_listings_term_normalization', 'cltn')
      ->fields('cltn', array('tid'))
      ->condition('term_to_normalize', $term_name)
      ->execute()
      ->fetchField();

    if (!empty($normalized_tid)) {
      $term = taxonomy_term_load($normalized_tid);
    }
    else {
      // This is a new term and there is no normalization.
      $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
      $term = new stdClass();
      $term->name = ucwords($term_name);
      $term->vid = $vocabulary->vid;
      taxonomy_term_save($term);
    }
  }

  return $term;
}

/**
 * Creates a human-readible title for an MLS listing.
 *
 * @param  drealtyListing $listing
 *
 * @return string
 */
function _c21_build_listing_title($listing) {
  $stats_values = array();
  $stats_fields = array(
    'bedroom' => 'bedrooms',
    'bathroom' => 'bathrooms',
  );
  $superlatives = array(
    t('great find'),
    t('worth a look'),
    t('check this out'),
  );

  foreach ($stats_fields as $label => $field) {
    $value = !empty($listing->{'field_mls_' . $field}) ? $listing->{'field_mls_' . $field}[LANGUAGE_NONE][0]['value'] : '';
    if (is_numeric($value)) {
      $stats_values[] = $value . ' ' . $label;
    }
  }

  if (isset($listing->field_mls_city[LANGUAGE_NONE][0]['value'])) {
    $township = $listing->field_mls_city[LANGUAGE_NONE][0]['value'];
  }
  elseif (isset($listing->field_mls_city[LANGUAGE_NONE][0]['tid'])) {
    $term = taxonomy_term_load($listing->field_mls_city[LANGUAGE_NONE][0]['tid']);
    $township = isset($term->name) ? $term->name : '';
  }
  else {
    $township = '';
  }

  if (empty($stats_values)) {
    $stats_values[] = $superlatives[array_rand($superlatives)];
  }

  $title = ucwords(implode(', ', $stats_values));
  if (!empty($township)) {
    $title .= ' in ' . $township;
  }

  return $title;
}

/**
 * Returns the street portion of a drealty listing address.
 *
 * @param object $entity
 *   A drealty listing entity
 *
 * @param string $info
 *   The type of information being requested. Options are street, town or state.
 *
 * @return string
 */
function _c21_get_address_info($entity, $info) {
  $return = '';

  switch ($info) {
    case 'street':
      if (isset($entity->field_mls_street_number[LANGUAGE_NONE][0]['value'])) {
        $return .= $entity->field_mls_street_number[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_direction[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_direction[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_name[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_name[LANGUAGE_NONE][0]['value'];
      }
      if (isset($entity->field_mls_street_suffix[LANGUAGE_NONE][0]['value'])) {
        $return .= ' ' . $entity->field_mls_street_suffix[LANGUAGE_NONE][0]['value'];
      }
      break;
    case 'town':
      if (isset($entity->field_mls_city[LANGUAGE_NONE][0]['tid'])) {
        $term = taxonomy_term_load($entity->field_mls_city[LANGUAGE_NONE][0]['tid']);
        $return .= isset($term->name) ? $term->name : '';
      }
      break;
    case 'state':
      if (isset($entity->field_mls_state[LANGUAGE_NONE][0]['value'])) {
        $return .= $entity->field_mls_state[LANGUAGE_NONE][0]['value'];
      }
      break;
  }
  return $return;
}


/**
 * Theme function.
 */
function theme_c21_office_address($variables) {
  $office = $variables['office_info'];

  $office_address = "";
  $office_address .= !empty($office->street) ? "<span class='street'>$office->street</span>" : "";
  $office_address .= !empty($office->city) && !empty($office->state) && !empty($office->zip) ? "<span class='city-state-zip'>$office->city, $office->state $office->zip</span>" : "";
  $office_address .= !empty($office->phone1) ? "<a class='phone' href='tel:" . preg_replace('/[^0..9]/', '', $office->phone1) . "'>$office->phone1</a>" : "";
  $office_address .= !empty($office->phone2) ? "<a class='phone' href='tel:" . preg_replace('/[^0..9]/', '', $office->phone2) . "'>$office->phone2</a>" : "";

  $attributes = array(
    'class' => array('address'),
  );
  if (!empty($variables['office_name'])) {
    $attributes['class'][] = $variables['office_name'];
  }
  return '<div ' . drupal_attributes($attributes) . '>' . $office_address . '</div>';
}
