<?php
/**
 * @file
 * Code for the c21 feature.
 */

include_once 'c21.features.inc';

// Give each of the date format types a machine name.
define('C21_DATE_TYPE_VERY_SHORT', 'c21_date_type_very_short');
define('C21_DATE_TYPE_VERY_LONG', 'c21_date_type_very_long');

// Define the date formats to be passed to date().
define('C21_DATE_FORMAT_VERY_SHORT', 'Y');
define('C21_DATE_FORMAT_SHORT', 'M d, Y');
define('C21_DATE_FORMAT_MEDIUM', 'F d, Y');
define('C21_DATE_FORMAT_LONG', 'F d Y, g:ia');
define('C21_DATE_FORMAT_VERY_LONG', 'l, F d Y, g:ia');

/**
 * Implements hook_theme().
 */
function c21_theme(){
  return array(
    'c21_office_address' => array(
      'variables' => array(
        'office_name' => '',
        'office_info' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function c21_menu_alter(&$items) {
  $items['node']['access callback'] = FALSE;
  $items['admin/structure/taxonomy']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_user_login().
 */
function c21_user_login(&$edit, $account) {
  if (user_access('access workbench')) {
    drupal_goto('admin/workbench');
  }
}

/**
 * Implements hook_block_info().
 */
function c21_block_info() {
  $blocks['c21_footer'] = array(
    'info' => t('Footer'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c21_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'c21_footer':
      $block['subject'] = '';
      $block['content'] = array(
        'address_dingmans' => array(
          '#theme' => 'c21_office_address',
          '#office_name' => 'dingmans',
          '#office_info' => c21_get_office_info('dingmans'),
        ),
        'address_milford' => array(
          '#theme' => 'c21_office_address',
          '#office_name' => 'milford',
          '#office_info' => c21_get_office_info('milford'),
        ),
        'copyright' => array(
          '#attributes' => array(
            'class' => array('copyright'),
          ),
          '#theme_wrappers' => array('container'),
          '#markup' => 'Each Office is Independently Owned and Operated. &copy; ' . date('Y') . ' Century 21 Real Estate LLC.</br>CENTURY 21&reg; is a registered trademark licensed to Century 21 Real Estate LLC.</br>Equal Housing Opportunity.',
        ),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view().
 */
function c21_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && !$node->status) {
    drupal_set_message(t('This %type is inactive and cannot be viewed by the public.', array('%type' => $node->type)), 'warning');
  }
}

/**
 * Implements hook_taxonomy_term_load().
 */
function c21_taxonomy_term_load($terms) {
  // By business rule, all taxonomy terms should be title case.
  foreach ($terms as $term) {
    $term->name = ucwords($term->name);
  }
}

/**
 * Implements hook_workbench_content_alter().
 */
function c21_workbench_content_alter(&$output) {
  if (module_exists('c21_listings')) {
    $output['c21_workbench_links'] = array(
      'common' => array(
        '#markup' => '<h2>' . t('Common Tasks') . '</h2>' . c21_listings_workbench_links('common'),
      ),
      'reports' => array(
        '#markup' => '<h2>' . t('Reports') . '</h2>' . c21_listings_workbench_links('report'),
      ),
      '#theme' => 'workbench_element',
      '#attributes' => array(
        'class' => array('left', 'clearfix'),
      ),
    );
    $output['#attached']['css'][] = drupal_get_path('module', 'c21') . '/css/c21_workbench.css';
    unset($output['workbench_current_user']);
  }

  $output['c21_workbench_edits_by_user'] = $output['workbench_edited'];
  $output['c21_workbench_edits_by_user']['#view'] = 'c21_workbench_edits_by_user';
  $output['c21_workbench_edits_by_user']['#view_display'] = 'block_1';
  unset($output['workbench_edited']);

  $output['c21_workbench_recent_content'] = $output['workbench_recent_content'];
  $output['c21_workbench_recent_content']['#view'] = 'c21_workbench_recent_content';
  $output['c21_workbench_recent_content']['#view_display'] = 'block_1';
  unset($output['workbench_recent_content']);

}

/**
 * Implements hook_date_formats().
 */
function c21_date_formats() {
  $formats = array();

  $formats[] = array(
    'type' => C21_DATE_TYPE_VERY_SHORT,
    'format' => C21_DATE_FORMAT_VERY_SHORT,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'short',
    'format' => C21_DATE_FORMAT_SHORT,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'medium',
    'format' => C21_DATE_FORMAT_MEDIUM,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => 'long',
    'format' => C21_DATE_FORMAT_LONG,
    'locales' => array(),
  );
  $formats[] = array(
    'type' => C21_DATE_TYPE_VERY_LONG,
    'format' => C21_DATE_FORMAT_VERY_LONG,
    'locales' => array(),
  );

  return $formats;
}

/**
 * Implements hook_date_format_types().
 */
function c21_date_format_types() {
  $types = array();
  $types[C21_DATE_TYPE_VERY_SHORT] = t('Very Short');
  $types[C21_DATE_TYPE_VERY_LONG] = t('Very Long');
  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c21_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['description']['#format'] = "rich_text";
}

/**
 * Return office location information.
 *
 * @param string $office
 *
 * @return stdClass || NULL
 */
function c21_get_office_info($office) {
  $office_info = new stdClass();

  switch ($office) {
    case 'milford':
      $office_info->street = '205 E. Harford St.';
      $office_info->city = 'Milford';
      $office_info->state = 'PA';
      $office_info->zip = '18337';
      $office_info->phone1 = '1-877-296-9921';
      $office_info->phone2 = '(570) 296-9921';
      break;

    case 'dingmans':
      $office_info->street = '1869 Route 739';
      $office_info->city = 'Dingmans Ferry';
      $office_info->state = 'PA';
      $office_info->zip = '18328';
      $office_info->phone1 = '1-800-458-4855';
      $office_info->phone2 = '(570) 828-9591';
      break;

    default:
      return NULL;
  }

  return $office_info;
}

/**
 * Return a file object after saving a default image and storing the fid
 * in a variable.
 *
 * @param array $default_image
 *   An associative array containing:
 *   - scheme: File API stream wrapper scheme (ie: 'public://', 'private://')
 *   - dest_directory: The directory within the files directory the default
 *     image will be copied to. No leading or trailing slash.
 *   - source_path: The full path to the existing default image that will
 *     be copied.
 *   - file_name: The name of the default image.
 *   - variable: The variable name that will store the default image fid.
 *
 * @return object
 *   A file object of the saved default image file.
 *
 * @see https://gist.github.com/sprice/2003047
 */
function c21_image_create($default_image) {
  $file_uri = $default_image['scheme'] . $default_image['dest_directory'] . '/' . $default_image['file_name'];
  $full_dir = $default_image['scheme'] . $default_image['dest_directory'];
  file_prepare_directory($full_dir, FILE_CREATE_DIRECTORY);
  file_unmanaged_copy($default_image['source_path'], $file_uri, FILE_EXISTS_REPLACE);
  $file = (object) array(
    'uid' => 1,
    'status' => FILE_STATUS_PERMANENT,
    'filename' => $default_image['file_name'],
    'uri' => $file_uri,
    'filemime' => file_get_mimetype($default_image['source_path']),
  );
  $file = file_save($file);
  if ($file) {
    variable_set($default_image['variable'], $file->fid);
  }
  return $file;
}

/**
 * Theme function.
 */
function theme_c21_office_address($variables) {
  $office = $variables['office_info'];

  $office_address = "";
  $office_address .= !empty($office->street) ? "<span class='street'>$office->street</span>" : "";
  $office_address .= !empty($office->city) && !empty($office->state) && !empty($office->zip) ? "<span class='city-state-zip'>$office->city, $office->state $office->zip</span>" : "";
  $office_address .= !empty($office->phone1) ? "<a class='phone' href='tel:" . preg_replace('/[^0..9]/', '', $office->phone1) . "'>$office->phone1</a>" : "";
  $office_address .= !empty($office->phone2) ? "<a class='phone' href='tel:" . preg_replace('/[^0..9]/', '', $office->phone2) . "'>$office->phone2</a>" : "";

  $attributes = array(
    'class' => array('address'),
  );
  if (!empty($variables['office_name'])) {
    $attributes['class'][] = $variables['office_name'];
  }
  return '<div ' . drupal_attributes($attributes) . '>' . $office_address . '</div>';
}
